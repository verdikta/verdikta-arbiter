"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/rank-and-justify/route";
exports.ids = ["app/api/rank-and-justify/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frank-and-justify%2Froute&page=%2Fapi%2Frank-and-justify%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frank-and-justify%2Froute.ts&appDir=%2Froot%2Fverdikta-arbiter%2Fai-node%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Froot%2Fverdikta-arbiter%2Fai-node&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frank-and-justify%2Froute&page=%2Fapi%2Frank-and-justify%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frank-and-justify%2Froute.ts&appDir=%2Froot%2Fverdikta-arbiter%2Fai-node%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Froot%2Fverdikta-arbiter%2Fai-node&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _root_verdikta_arbiter_ai_node_src_app_api_rank_and_justify_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/rank-and-justify/route.ts */ \"(rsc)/./src/app/api/rank-and-justify/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/rank-and-justify/route\",\n        pathname: \"/api/rank-and-justify\",\n        filename: \"route\",\n        bundlePath: \"app/api/rank-and-justify/route\"\n    },\n    resolvedPagePath: \"/root/verdikta-arbiter/ai-node/src/app/api/rank-and-justify/route.ts\",\n    nextConfigOutput,\n    userland: _root_verdikta_arbiter_ai_node_src_app_api_rank_and_justify_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/rank-and-justify/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZyYW5rLWFuZC1qdXN0aWZ5JTJGcm91dGUmcGFnZT0lMkZhcGklMkZyYW5rLWFuZC1qdXN0aWZ5JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGcmFuay1hbmQtanVzdGlmeSUyRnJvdXRlLnRzJmFwcERpcj0lMkZyb290JTJGdmVyZGlrdGEtYXJiaXRlciUyRmFpLW5vZGUlMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRnJvb3QlMkZ2ZXJkaWt0YS1hcmJpdGVyJTJGYWktbm9kZSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDb0I7QUFDakc7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS13ZWItdGVtcGxhdGUvPzgzY2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL3Jvb3QvdmVyZGlrdGEtYXJiaXRlci9haS1ub2RlL3NyYy9hcHAvYXBpL3JhbmstYW5kLWp1c3RpZnkvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3JhbmstYW5kLWp1c3RpZnkvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9yYW5rLWFuZC1qdXN0aWZ5XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9yYW5rLWFuZC1qdXN0aWZ5L3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL3Jvb3QvdmVyZGlrdGEtYXJiaXRlci9haS1ub2RlL3NyYy9hcHAvYXBpL3JhbmstYW5kLWp1c3RpZnkvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3JhbmstYW5kLWp1c3RpZnkvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frank-and-justify%2Froute&page=%2Fapi%2Frank-and-justify%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frank-and-justify%2Froute.ts&appDir=%2Froot%2Fverdikta-arbiter%2Fai-node%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Froot%2Fverdikta-arbiter%2Fai-node&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/rank-and-justify/route.ts":
/*!***********************************************!*\
  !*** ./src/app/api/rank-and-justify/route.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_llm_llm_factory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/llm/llm-factory */ \"(rsc)/./src/lib/llm/llm-factory.ts\");\n/* harmony import */ var _config_prePromptConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config/prePromptConfig */ \"(rsc)/./src/config/prePromptConfig.ts\");\n/* harmony import */ var _config_postPromptConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../config/postPromptConfig */ \"(rsc)/./src/config/postPromptConfig.ts\");\n/* harmony import */ var _utils_parseModelResponse__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utils/parseModelResponse */ \"(rsc)/./src/utils/parseModelResponse.ts\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n// Load the justifier model name from environment variables\nconst JUSTIFIER_MODEL = process.env.JUSTIFIER_MODEL || \"default-justifier-model\";\nconst [justifierProviderName, justifierModelName] = process.env.JUSTIFIER_MODEL?.split(\":\") || [\n    \"JustifierProvider\",\n    \"default-model\"\n];\nfunction logInteraction(message) {\n    const timestamp = new Date().toISOString();\n    const logMessage = `[${timestamp}] ${message}\\n`;\n    // Log to console\n    console.log(logMessage);\n    // Log to file\n    const logDir = path__WEBPACK_IMPORTED_MODULE_6___default().join(process.cwd(), \"logs\");\n    const logFile = path__WEBPACK_IMPORTED_MODULE_6___default().join(logDir, \"llm-interactions.log\");\n    try {\n        // Create logs directory if it doesn't exist\n        if (!fs__WEBPACK_IMPORTED_MODULE_5___default().existsSync(logDir)) {\n            fs__WEBPACK_IMPORTED_MODULE_5___default().mkdirSync(logDir, {\n                recursive: true\n            });\n        }\n        fs__WEBPACK_IMPORTED_MODULE_5___default().appendFileSync(logFile, logMessage);\n    } catch (error) {\n        console.error(\"Error writing to log file:\", error);\n    }\n}\nasync function POST(request) {\n    try {\n        console.log(\"POST request received at /api/rank-and-justify\");\n        const body = await request.json();\n        console.log(\"Request body:\", {\n            prompt: body.prompt,\n            models: body.models,\n            hasAttachments: body.attachments?.length ?? 0 > 0,\n            attachmentsCount: body.attachments?.length ?? 0\n        });\n        // Input validation\n        if (!body.prompt || !Array.isArray(body.models) || body.models.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid input. \"prompt\" and \"models\" are required.'\n            }, {\n                status: 400\n            });\n        }\n        const prompt = body.prompt;\n        const iterations = body.iterations || 1;\n        const models = body.models;\n        // Process attachments if they exist\n        if (body.attachments?.length) {\n            console.log(\"Processing attachments...\");\n            body.attachments.forEach((content, index)=>{\n                console.log(`Attachment ${index + 1}:`);\n                console.log(\"- Content type:\", typeof content);\n                if (typeof content === \"string\") {\n                    console.log(\"- Starts with:\", content.substring(0, 50) + \"...\");\n                    if (content.startsWith(\"data:\")) {\n                        const mediaTypeMatch = content.match(/^data:([^;]+);base64,/);\n                        console.log(\"- Media type:\", mediaTypeMatch ? mediaTypeMatch[1] : \"unknown\");\n                    } else {\n                        console.log(\"- WARNING: Attachment does not start with data: URI scheme\");\n                    }\n                } else {\n                    console.log(\"- WARNING: Attachment is not a string\");\n                }\n            });\n        }\n        const attachments = body.attachments?.map((content, index)=>{\n            if (content.startsWith(\"data:image\")) {\n                const mediaTypeMatch = content.match(/^data:([^;]+);base64,/);\n                const mediaType = mediaTypeMatch ? mediaTypeMatch[1] : \"image/jpeg\";\n                console.log(`Processing image attachment ${index + 1}:`, {\n                    mediaType,\n                    contentLength: content.length,\n                    isBase64: content.includes(\";base64,\")\n                });\n                const base64Data = content.replace(/^data:image\\/[^;]+;base64,/, \"\");\n                return {\n                    type: \"image\",\n                    content: base64Data,\n                    mediaType: mediaType\n                };\n            }\n            console.log(`Processing non-image attachment ${index + 1}:`, {\n                type: \"text\",\n                contentLength: content.length\n            });\n            return {\n                type: \"text\",\n                content: content,\n                mediaType: \"text/plain\"\n            };\n        }) || [];\n        // Log processed attachments summary\n        console.log(\"Processed attachments summary:\", attachments.map((att)=>({\n                type: att.type,\n                mediaType: att.mediaType,\n                contentLength: att.content.length\n            })));\n        // Initialize data structures\n        const previousIterationResponses = [];\n        const modelOutputs = [];\n        const V_average = [];\n        const weights = [];\n        const totalWeights = models.reduce((sum, m)=>sum + m.weight, 0);\n        const allJustifications = [];\n        // Validate total weights\n        if (totalWeights <= 0 || totalWeights > models.length) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Invalid weights assigned to models.\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(\"Starting model invocations\");\n        let finalAggregatedScore = [];\n        let finalJustification = \"\";\n        // Model Invocation\n        for(let i = 0; i < iterations; i++){\n            console.log(`Starting iteration ${i + 1}`);\n            const iterationOutputs = [];\n            const iterationWeights = [];\n            const iterationJustifications = [];\n            // Process each model for this iteration\n            for(let j = 0; j < models.length; j++){\n                const modelInfo = models[j];\n                const count = modelInfo.count || 1;\n                const weight = modelInfo.weight;\n                const allOutputs = [];\n                console.log(`Processing model: ${modelInfo.provider} - ${modelInfo.model}`);\n                if (!modelInfo.provider || !modelInfo.model || weight < 0 || weight > 1) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        error: \"Invalid model input. Check provider, model, and weight.\"\n                    }, {\n                        status: 400\n                    });\n                }\n                try {\n                    // Cast to unknown first to avoid type mismatch\n                    const llmProvider = await _lib_llm_llm_factory__WEBPACK_IMPORTED_MODULE_1__.LLMFactory.getProvider(modelInfo.provider);\n                    if (!llmProvider) {\n                        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                            error: `Unsupported provider: ${modelInfo.provider}`\n                        }, {\n                            status: 400\n                        });\n                    }\n                    // Construct the full prompt based on iteration\n                    let iterationPrompt = `${_config_prePromptConfig__WEBPACK_IMPORTED_MODULE_2__.prePromptConfig.getPrompt(body.outcomes)}\\n\\n${prompt}`;\n                    if (i > 0 && previousIterationResponses.length > 0) {\n                        const previousResponsesText = previousIterationResponses.join(\"\\n\\n\");\n                        iterationPrompt = `${iterationPrompt}\\n\\n${_config_postPromptConfig__WEBPACK_IMPORTED_MODULE_3__.postPromptConfig.prompt.replace(\"{{previousResponses}}\", previousResponsesText)}`;\n                    }\n                    if (attachments.length > 0) {\n                        console.log(`Sending ${attachments.length} attachments to ${modelInfo.provider}:`, attachments.map((att)=>({\n                                type: att.type,\n                                mediaType: att.mediaType,\n                                contentLength: att.content.length\n                            })));\n                    }\n                    for(let c = 0; c < count; c++){\n                        let responseText;\n                        if (attachments.length > 0 && llmProvider.supportsAttachments(modelInfo.model)) {\n                            logInteraction(`Prompt to ${modelInfo.provider} - ${modelInfo.model} with attachments:\\n${iterationPrompt}\\n`);\n                            try {\n                                responseText = await llmProvider.generateResponseWithAttachments(iterationPrompt, modelInfo.model, attachments);\n                                logInteraction(`Response from ${modelInfo.provider} - ${modelInfo.model}:\\n${responseText}\\n`);\n                            } catch (providerError) {\n                                console.error(`Provider error from ${modelInfo.provider}/${modelInfo.model}:`, {\n                                    error: providerError.message,\n                                    stack: providerError.stack,\n                                    attachments: attachments.length > 0 ? \"Has attachments\" : \"No attachments\"\n                                });\n                                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                                    error: providerError.message,\n                                    scores: [],\n                                    justification: \"\"\n                                }, {\n                                    status: 400\n                                });\n                            }\n                        } else {\n                            logInteraction(`Prompt to ${modelInfo.provider} - ${modelInfo.model}:\\n${iterationPrompt}\\n`);\n                            try {\n                                responseText = await llmProvider.generateResponse(iterationPrompt, modelInfo.model);\n                                logInteraction(`Response from ${modelInfo.provider} - ${modelInfo.model}:\\n${responseText}\\n`);\n                            } catch (providerError) {\n                                console.error(`Provider error from ${modelInfo.provider}/${modelInfo.model}:`, {\n                                    error: providerError.message,\n                                    stack: providerError.stack,\n                                    attachments: attachments.length > 0 ? \"Has attachments\" : \"No attachments\"\n                                });\n                                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                                    error: providerError.message,\n                                    scores: [],\n                                    justification: \"\"\n                                }, {\n                                    status: 400\n                                });\n                            }\n                        }\n                        let { decisionVector, justification, scores } = (0,_utils_parseModelResponse__WEBPACK_IMPORTED_MODULE_4__.parseModelResponse)(responseText, body.outcomes);\n                        let effectiveJustification = justification; // Store potentially modified justification\n                        if (!decisionVector) {\n                            console.warn(`Failed to parse decision vector from model ${modelInfo.model}. Response: ${responseText}. Applying fallback.`);\n                            const numOutcomes = body.outcomes?.length || 2; // Default to 2 if outcomes not specified\n                            const baseScore = Math.floor(1000000 / numOutcomes);\n                            const fallbackDecisionVector = Array(numOutcomes).fill(baseScore);\n                            // Distribute remainder to ensure sum is exactly 1,000,000\n                            fallbackDecisionVector[0] += 1000000 - baseScore * numOutcomes;\n                            decisionVector = fallbackDecisionVector; // Use fallback vector\n                            if (!justification) {\n                                effectiveJustification = `LLM_ERROR: ${responseText}`; // Create fallback justification\n                            }\n                        // No need to return an error, proceed with fallback values\n                        }\n                        allOutputs.push(decisionVector);\n                        if (effectiveJustification) {\n                            const formattedResponse = `From ${modelInfo.provider} - ${modelInfo.model}:\\nScore: ${decisionVector}\\nJustification: ${effectiveJustification}`;\n                            iterationJustifications.push(`From model ${modelInfo.model}:\\n${effectiveJustification}`);\n                            if (i < iterations - 1) {\n                                previousIterationResponses.push(formattedResponse);\n                            }\n                        }\n                    }\n                    // Average the outputs for this model if count > 1\n                    const modelAverage = count > 1 ? averageVectors(allOutputs) : allOutputs[0];\n                    iterationOutputs.push(modelAverage);\n                    iterationWeights.push(weight);\n                } catch (error) {\n                    // If we get here, an error occurred trying to get the provider or during model setup.\n                    console.error(`Critical error processing model ${modelInfo.provider} - ${modelInfo.model} (iteration ${i + 1}):`, error);\n                    // === ADD THIS: Return 400 immediately on provider setup error ===\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        error: `Failed to process model configuration: ${modelInfo.provider} - ${modelInfo.model}. Reason: ${error.message}`,\n                        scores: [],\n                        justification: \"\"\n                    }, {\n                        status: 400\n                    });\n                // === END ADDITION ===\n                // Optionally, add a placeholder or skip this model's contribution (Original behavior - now replaced by the return above)\n                }\n            }\n            // Compute weighted average for this iteration\n            finalAggregatedScore = computeAverageVectors(iterationOutputs, iterationWeights);\n            // Generate justification only on the final iteration\n            if (i === iterations - 1) {\n                try {\n                    const justifierProvider = await _lib_llm_llm_factory__WEBPACK_IMPORTED_MODULE_1__.LLMFactory.getProvider(justifierProviderName);\n                    logInteraction(`Prompt to Justifier:\n${prompt}\\n`); // Assuming base prompt is sufficient context\n                    finalJustification = await generateJustification(finalAggregatedScore, iterationJustifications, justifierProvider, justifierModelName);\n                    logInteraction(`Response from Justifier:\n${finalJustification}\\n`);\n                } catch (error) {\n                    console.error(\"Error generating final justification in iteration:\", error);\n                    finalJustification = \"Error generating final justification.\"; // Handle error gracefully\n                }\n            }\n        // Note: Logic for handling previousIterationResponses for multi-iteration prompts removed for clarity,\n        // as the tests seem focused on single iteration or simple aggregation.\n        }\n        // Format the final response using results from the LAST iteration\n        const responseBody = {\n            scores: body.outcomes ? finalAggregatedScore.map((score, index)=>({\n                    outcome: body.outcomes[index],\n                    score: Math.floor(score)\n                })) : finalAggregatedScore.map((score)=>({\n                    outcome: \"unnamed\",\n                    score: Math.floor(score)\n                })),\n            justification: finalJustification\n        };\n        console.log(\"Sending final response:\", responseBody);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(responseBody);\n    } catch (error) {\n        // General error handling for the entire POST request\n        console.error(\"Error in POST /api/rank-and-justify:\", {\n            error: error.message,\n            stack: error.stack,\n            type: error.constructor.name\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.message || \"An error occurred while processing the request.\",\n            scores: [],\n            justification: \"\"\n        }, {\n            status: 500\n        });\n    }\n}\n// Helper function - NOT exported\nasync function generateJustification(V_total, allJustifications, justifierProvider, justifierModel) {\n    const prompt = `Using the aggregated decision vector ${JSON.stringify(V_total)}, and considering the following justifications from individual models:\\n\\n${allJustifications.join(\"\\n\\n\")}\\n\\nProvide a comprehensive justification for the result.`;\n    const response = await justifierProvider.generateResponse(prompt, justifierModel);\n    return response;\n}\n// Helper function - NOT exported\nfunction computeAverageVectors(vectors, weights) {\n    if (!vectors || vectors.length === 0 || vectors.length !== weights.length) {\n        // Handle empty input or mismatched lengths\n        console.warn(\"computeAverageVectors received invalid input:\", {\n            vectors: vectors?.length,\n            weights: weights?.length\n        });\n        return [];\n    }\n    const totalWeight = weights.reduce((sum, w)=>sum + w, 0);\n    if (totalWeight === 0) {\n        console.warn(\"computeAverageVectors received zero total weight.\");\n        return [];\n    }\n    const dimensions = vectors[0].length;\n    const result = new Array(dimensions).fill(0);\n    for(let i = 0; i < vectors.length; i++){\n        for(let j = 0; j < dimensions; j++){\n            // Simplified weighted accumulation assuming vectors.length === weights.length\n            result[j] += vectors[i][j] * weights[i] / totalWeight;\n        }\n    }\n    return result;\n}\n// Helper function - NOT exported\nfunction averageVectors(vectors) {\n    const dimensions = vectors[0].length;\n    const result = new Array(dimensions).fill(0);\n    for(let i = 0; i < vectors.length; i++){\n        for(let j = 0; j < dimensions; j++){\n            result[j] += vectors[i][j];\n        }\n    }\n    for(let j = 0; j < dimensions; j++){\n        result[j] = Math.floor(result[j] / vectors.length);\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/rank-and-justify/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/config/models.ts":
/*!******************************!*\
  !*** ./src/config/models.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   modelConfig: () => (/* binding */ modelConfig)\n/* harmony export */ });\nconst modelConfig = {\n    openai: [\n        {\n            name: \"gpt-3.5-turbo\",\n            supportsImages: false,\n            supportsAttachments: false\n        },\n        {\n            name: \"gpt-4\",\n            supportsImages: false,\n            supportsAttachments: false\n        },\n        {\n            name: \"gpt-4o\",\n            supportsImages: true,\n            supportsAttachments: true\n        }\n    ],\n    anthropic: [\n        {\n            name: \"claude-2.1\",\n            supportsImages: false,\n            supportsAttachments: false\n        },\n        {\n            name: \"claude-3-sonnet-20240229\",\n            supportsImages: true,\n            supportsAttachments: true\n        },\n        {\n            name: \"claude-3-5-sonnet-20241022\",\n            supportsImages: true,\n            supportsAttachments: true\n        }\n    ],\n    ollama: []\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29uZmlnL21vZGVscy50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsY0FBYztJQUN6QkMsUUFBUTtRQUNOO1lBQUVDLE1BQU07WUFBaUJDLGdCQUFnQjtZQUFPQyxxQkFBcUI7UUFBTTtRQUMzRTtZQUFFRixNQUFNO1lBQVNDLGdCQUFnQjtZQUFPQyxxQkFBcUI7UUFBTTtRQUNuRTtZQUFFRixNQUFNO1lBQVVDLGdCQUFnQjtZQUFNQyxxQkFBcUI7UUFBSztLQUNuRTtJQUNEQyxXQUFXO1FBQ1Q7WUFBRUgsTUFBTTtZQUFjQyxnQkFBZ0I7WUFBT0MscUJBQXFCO1FBQU07UUFDeEU7WUFBRUYsTUFBTTtZQUE0QkMsZ0JBQWdCO1lBQU1DLHFCQUFxQjtRQUFLO1FBQ3BGO1lBQUVGLE1BQU07WUFBOEJDLGdCQUFnQjtZQUFNQyxxQkFBcUI7UUFBSztLQUN2RjtJQUNERSxRQUFRLEVBRVA7QUFDSCxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktd2ViLXRlbXBsYXRlLy4vc3JjL2NvbmZpZy9tb2RlbHMudHM/N2RlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgbW9kZWxDb25maWcgPSB7XG4gIG9wZW5haTogW1xuICAgIHsgbmFtZTogJ2dwdC0zLjUtdHVyYm8nLCBzdXBwb3J0c0ltYWdlczogZmFsc2UsIHN1cHBvcnRzQXR0YWNobWVudHM6IGZhbHNlIH0sXG4gICAgeyBuYW1lOiAnZ3B0LTQnLCBzdXBwb3J0c0ltYWdlczogZmFsc2UsIHN1cHBvcnRzQXR0YWNobWVudHM6IGZhbHNlIH0sXG4gICAgeyBuYW1lOiAnZ3B0LTRvJywgc3VwcG9ydHNJbWFnZXM6IHRydWUsIHN1cHBvcnRzQXR0YWNobWVudHM6IHRydWUgfSxcbiAgXSxcbiAgYW50aHJvcGljOiBbXG4gICAgeyBuYW1lOiAnY2xhdWRlLTIuMScsIHN1cHBvcnRzSW1hZ2VzOiBmYWxzZSwgc3VwcG9ydHNBdHRhY2htZW50czogZmFsc2UgfSxcbiAgICB7IG5hbWU6ICdjbGF1ZGUtMy1zb25uZXQtMjAyNDAyMjknLCBzdXBwb3J0c0ltYWdlczogdHJ1ZSwgc3VwcG9ydHNBdHRhY2htZW50czogdHJ1ZSB9LFxuICAgIHsgbmFtZTogJ2NsYXVkZS0zLTUtc29ubmV0LTIwMjQxMDIyJywgc3VwcG9ydHNJbWFnZXM6IHRydWUsIHN1cHBvcnRzQXR0YWNobWVudHM6IHRydWUgfSxcbiAgXSxcbiAgb2xsYW1hOiBbXG4gICAgLy8gQWRkIG9sbGFtYSBtb2RlbHMgaGVyZVxuICBdLFxufTtcbiJdLCJuYW1lcyI6WyJtb2RlbENvbmZpZyIsIm9wZW5haSIsIm5hbWUiLCJzdXBwb3J0c0ltYWdlcyIsInN1cHBvcnRzQXR0YWNobWVudHMiLCJhbnRocm9waWMiLCJvbGxhbWEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/config/models.ts\n");

/***/ }),

/***/ "(rsc)/./src/config/postPromptConfig.ts":
/*!****************************************!*\
  !*** ./src/config/postPromptConfig.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   postPromptConfig: () => (/* binding */ postPromptConfig)\n/* harmony export */ });\nconst postPromptConfig = {\n    prompt: `Below are the responses from all models in the previous iteration. Consider these responses when making your evaluation.  Try to reflect on the responses and gain insight into the scenario:\n\nPrevious Responses:\n{{previousResponses}}\n\nPlease provide your updated evaluation based on both the original scenario and these previous responses.`\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29uZmlnL3Bvc3RQcm9tcHRDb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLG1CQUFtQjtJQUM5QkMsUUFBUSxDQUFDOzs7Ozt3R0FLNkYsQ0FBQztBQUN6RyxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktd2ViLXRlbXBsYXRlLy4vc3JjL2NvbmZpZy9wb3N0UHJvbXB0Q29uZmlnLnRzPzg0YmEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHBvc3RQcm9tcHRDb25maWcgPSB7XG4gIHByb21wdDogYEJlbG93IGFyZSB0aGUgcmVzcG9uc2VzIGZyb20gYWxsIG1vZGVscyBpbiB0aGUgcHJldmlvdXMgaXRlcmF0aW9uLiBDb25zaWRlciB0aGVzZSByZXNwb25zZXMgd2hlbiBtYWtpbmcgeW91ciBldmFsdWF0aW9uLiAgVHJ5IHRvIHJlZmxlY3Qgb24gdGhlIHJlc3BvbnNlcyBhbmQgZ2FpbiBpbnNpZ2h0IGludG8gdGhlIHNjZW5hcmlvOlxuXG5QcmV2aW91cyBSZXNwb25zZXM6XG57e3ByZXZpb3VzUmVzcG9uc2VzfX1cblxuUGxlYXNlIHByb3ZpZGUgeW91ciB1cGRhdGVkIGV2YWx1YXRpb24gYmFzZWQgb24gYm90aCB0aGUgb3JpZ2luYWwgc2NlbmFyaW8gYW5kIHRoZXNlIHByZXZpb3VzIHJlc3BvbnNlcy5gXG59O1xuIl0sIm5hbWVzIjpbInBvc3RQcm9tcHRDb25maWciLCJwcm9tcHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/config/postPromptConfig.ts\n");

/***/ }),

/***/ "(rsc)/./src/config/prePromptConfig.ts":
/*!***************************************!*\
  !*** ./src/config/prePromptConfig.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prePromptConfig: () => (/* binding */ prePromptConfig)\n/* harmony export */ });\nconst prePromptConfig = {\n    getPrompt: (outcomes)=>{\n        const numOutcomes = outcomes?.length || 2;\n        const outcomesList = outcomes ? outcomes.map((outcome, i)=>`${i + 1}. ${outcome}`).join(\"\\n\") : \"1. Option A\\n2. Option B\";\n        const scoreMapping = outcomes ? outcomes.map((outcome, i)=>`- score[${i}] represents the likelihood of: ${outcome}`).join(\"\\n\") : \"- score[0] represents the likelihood of: Option A\\n- score[1] represents the likelihood of: Option B\";\n        // Create example scores that sum to 1,000,000\n        const baseScore = Math.floor(1000000 / numOutcomes);\n        const exampleScores = Array(numOutcomes).fill(baseScore);\n        // Add any remainder to the first score to ensure sum is exactly 1,000,000\n        exampleScores[0] += 1000000 - baseScore * numOutcomes;\n        // Create a more varied example to show different distributions\n        const variedExample = Array(numOutcomes).fill(0);\n        const total = 1000000;\n        for(let i = 0; i < numOutcomes; i++){\n            variedExample[i] = Math.floor(total * (numOutcomes - i) / (numOutcomes * (numOutcomes + 1) / 2));\n        }\n        // Adjust the last element to ensure sum is exactly 1,000,000\n        const sum = variedExample.reduce((a, b)=>a + b, 0);\n        variedExample[variedExample.length - 1] += 1000000 - sum;\n        return `You are tasked with evaluating the following request based on the provided text \nand optional attachments, which may include images and other files. You must respond with \na JSON object containing exactly two fields: 'score' and 'justification'.\n\n${outcomes ? `IMPORTANT: You must evaluate ALL of the following ${numOutcomes} outcomes:\n${outcomesList}\n\nYour score array MUST contain exactly ${numOutcomes} elements in the specified order, where:\n${scoreMapping}\n\nYou MUST provide a score for EACH of these ${numOutcomes} outcomes. Do not omit any outcomes.\n` : \"\"}\n\nThe 'score' field must be an array of ${numOutcomes} integers representing the likelihood of each outcome, \nensuring they sum to 1,000,000. Each outcome must receive a score, even if it's low.\n\nThe 'justification' field must be a string explaining your scoring rationale for ALL outcomes.\n\nRESPONSE FORMAT:\n{\n  \"score\": [${exampleScores.join(\", \")}],\n  \"justification\": \"Explaining likelihood for ALL outcomes: First outcome (${outcomes?.[0]}) scored X because... Second outcome (${outcomes?.[1]}) scored Y because... etc.\"\n}\n\nREQUIREMENTS:\n- Response must be valid JSON\n- Score array must contain exactly ${numOutcomes} integers\n- Score values must sum to 1,000,000\n- Justification must explain the reasoning for ALL ${numOutcomes} scores\n\nHere's an example of uneven distribution across ${numOutcomes} outcomes:\n{\n  \"score\": [${variedExample.join(\", \")}],\n  \"justification\": \"First outcome scored highest because... Second outcome lower because... [continue for all ${numOutcomes} outcomes]\"\n}\n\nEvaluate the following request and provide your response in the specified JSON format:\n`;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29uZmlnL3ByZVByb21wdENvbmZpZy50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsa0JBQWtCO0lBQzdCQyxXQUFXLENBQUNDO1FBQ1YsTUFBTUMsY0FBY0QsVUFBVUUsVUFBVTtRQUN4QyxNQUFNQyxlQUFlSCxXQUNqQkEsU0FBU0ksR0FBRyxDQUFDLENBQUNDLFNBQVNDLElBQU0sQ0FBQyxFQUFFQSxJQUFJLEVBQUUsRUFBRSxFQUFFRCxRQUFRLENBQUMsRUFBRUUsSUFBSSxDQUFDLFFBQzFEO1FBRUosTUFBTUMsZUFBZVIsV0FDakJBLFNBQVNJLEdBQUcsQ0FBQyxDQUFDQyxTQUFTQyxJQUFNLENBQUMsUUFBUSxFQUFFQSxFQUFFLGdDQUFnQyxFQUFFRCxRQUFRLENBQUMsRUFBRUUsSUFBSSxDQUFDLFFBQzVGO1FBRUosOENBQThDO1FBQzlDLE1BQU1FLFlBQVlDLEtBQUtDLEtBQUssQ0FBQyxVQUFVVjtRQUN2QyxNQUFNVyxnQkFBZ0JDLE1BQU1aLGFBQWFhLElBQUksQ0FBQ0w7UUFDOUMsMEVBQTBFO1FBQzFFRyxhQUFhLENBQUMsRUFBRSxJQUFJLFVBQVdILFlBQVlSO1FBRTNDLCtEQUErRDtRQUMvRCxNQUFNYyxnQkFBZ0JGLE1BQU1aLGFBQWFhLElBQUksQ0FBQztRQUM5QyxNQUFNRSxRQUFRO1FBQ2QsSUFBSyxJQUFJVixJQUFJLEdBQUdBLElBQUlMLGFBQWFLLElBQUs7WUFDcENTLGFBQWEsQ0FBQ1QsRUFBRSxHQUFHSSxLQUFLQyxLQUFLLENBQUNLLFFBQVNmLENBQUFBLGNBQWNLLENBQUFBLElBQU0sZUFBZ0JMLENBQUFBLGNBQWMsS0FBTTtRQUNqRztRQUNBLDZEQUE2RDtRQUM3RCxNQUFNZ0IsTUFBTUYsY0FBY0csTUFBTSxDQUFDLENBQUNDLEdBQUdDLElBQU1ELElBQUlDLEdBQUc7UUFDbERMLGFBQWEsQ0FBQ0EsY0FBY2IsTUFBTSxHQUFHLEVBQUUsSUFBSSxVQUFVZTtRQUVyRCxPQUFPLENBQUM7Ozs7QUFJWixFQUFFakIsV0FBVyxDQUFDLGtEQUFrRCxFQUFFQyxZQUFZO0FBQzlFLEVBQUVFLGFBQWE7O3NDQUV1QixFQUFFRixZQUFZO0FBQ3BELEVBQUVPLGFBQWE7OzJDQUU0QixFQUFFUCxZQUFZO0FBQ3pELENBQUMsR0FBRyxHQUFHOztzQ0FFK0IsRUFBRUEsWUFBWTs7Ozs7OztZQU94QyxFQUFFVyxjQUFjTCxJQUFJLENBQUMsTUFBTTsyRUFDb0MsRUFBRVAsVUFBVSxDQUFDLEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRUEsVUFBVSxDQUFDLEVBQUUsQ0FBQzs7Ozs7bUNBSzlHLEVBQUVDLFlBQVk7O21EQUVFLEVBQUVBLFlBQVk7O2dEQUVqQixFQUFFQSxZQUFZOztZQUVsRCxFQUFFYyxjQUFjUixJQUFJLENBQUMsTUFBTTs4R0FDdUUsRUFBRU4sWUFBWTs7OztBQUk1SCxDQUFDO0lBQ0M7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktd2ViLXRlbXBsYXRlLy4vc3JjL2NvbmZpZy9wcmVQcm9tcHRDb25maWcudHM/ZTQxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgcHJlUHJvbXB0Q29uZmlnID0ge1xuICBnZXRQcm9tcHQ6IChvdXRjb21lcz86IHN0cmluZ1tdKSA9PiB7XG4gICAgY29uc3QgbnVtT3V0Y29tZXMgPSBvdXRjb21lcz8ubGVuZ3RoIHx8IDI7XG4gICAgY29uc3Qgb3V0Y29tZXNMaXN0ID0gb3V0Y29tZXMgXG4gICAgICA/IG91dGNvbWVzLm1hcCgob3V0Y29tZSwgaSkgPT4gYCR7aSArIDF9LiAke291dGNvbWV9YCkuam9pbignXFxuJylcbiAgICAgIDogJzEuIE9wdGlvbiBBXFxuMi4gT3B0aW9uIEInO1xuXG4gICAgY29uc3Qgc2NvcmVNYXBwaW5nID0gb3V0Y29tZXMgXG4gICAgICA/IG91dGNvbWVzLm1hcCgob3V0Y29tZSwgaSkgPT4gYC0gc2NvcmVbJHtpfV0gcmVwcmVzZW50cyB0aGUgbGlrZWxpaG9vZCBvZjogJHtvdXRjb21lfWApLmpvaW4oJ1xcbicpXG4gICAgICA6ICctIHNjb3JlWzBdIHJlcHJlc2VudHMgdGhlIGxpa2VsaWhvb2Qgb2Y6IE9wdGlvbiBBXFxuLSBzY29yZVsxXSByZXByZXNlbnRzIHRoZSBsaWtlbGlob29kIG9mOiBPcHRpb24gQic7XG5cbiAgICAvLyBDcmVhdGUgZXhhbXBsZSBzY29yZXMgdGhhdCBzdW0gdG8gMSwwMDAsMDAwXG4gICAgY29uc3QgYmFzZVNjb3JlID0gTWF0aC5mbG9vcigxMDAwMDAwIC8gbnVtT3V0Y29tZXMpO1xuICAgIGNvbnN0IGV4YW1wbGVTY29yZXMgPSBBcnJheShudW1PdXRjb21lcykuZmlsbChiYXNlU2NvcmUpO1xuICAgIC8vIEFkZCBhbnkgcmVtYWluZGVyIHRvIHRoZSBmaXJzdCBzY29yZSB0byBlbnN1cmUgc3VtIGlzIGV4YWN0bHkgMSwwMDAsMDAwXG4gICAgZXhhbXBsZVNjb3Jlc1swXSArPSAxMDAwMDAwIC0gKGJhc2VTY29yZSAqIG51bU91dGNvbWVzKTtcblxuICAgIC8vIENyZWF0ZSBhIG1vcmUgdmFyaWVkIGV4YW1wbGUgdG8gc2hvdyBkaWZmZXJlbnQgZGlzdHJpYnV0aW9uc1xuICAgIGNvbnN0IHZhcmllZEV4YW1wbGUgPSBBcnJheShudW1PdXRjb21lcykuZmlsbCgwKTtcbiAgICBjb25zdCB0b3RhbCA9IDEwMDAwMDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1PdXRjb21lczsgaSsrKSB7XG4gICAgICB2YXJpZWRFeGFtcGxlW2ldID0gTWF0aC5mbG9vcih0b3RhbCAqIChudW1PdXRjb21lcyAtIGkpIC8gKChudW1PdXRjb21lcyAqIChudW1PdXRjb21lcyArIDEpKSAvIDIpKTtcbiAgICB9XG4gICAgLy8gQWRqdXN0IHRoZSBsYXN0IGVsZW1lbnQgdG8gZW5zdXJlIHN1bSBpcyBleGFjdGx5IDEsMDAwLDAwMFxuICAgIGNvbnN0IHN1bSA9IHZhcmllZEV4YW1wbGUucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCk7XG4gICAgdmFyaWVkRXhhbXBsZVt2YXJpZWRFeGFtcGxlLmxlbmd0aCAtIDFdICs9IDEwMDAwMDAgLSBzdW07XG5cbiAgICByZXR1cm4gYFlvdSBhcmUgdGFza2VkIHdpdGggZXZhbHVhdGluZyB0aGUgZm9sbG93aW5nIHJlcXVlc3QgYmFzZWQgb24gdGhlIHByb3ZpZGVkIHRleHQgXG5hbmQgb3B0aW9uYWwgYXR0YWNobWVudHMsIHdoaWNoIG1heSBpbmNsdWRlIGltYWdlcyBhbmQgb3RoZXIgZmlsZXMuIFlvdSBtdXN0IHJlc3BvbmQgd2l0aCBcbmEgSlNPTiBvYmplY3QgY29udGFpbmluZyBleGFjdGx5IHR3byBmaWVsZHM6ICdzY29yZScgYW5kICdqdXN0aWZpY2F0aW9uJy5cblxuJHtvdXRjb21lcyA/IGBJTVBPUlRBTlQ6IFlvdSBtdXN0IGV2YWx1YXRlIEFMTCBvZiB0aGUgZm9sbG93aW5nICR7bnVtT3V0Y29tZXN9IG91dGNvbWVzOlxuJHtvdXRjb21lc0xpc3R9XG5cbllvdXIgc2NvcmUgYXJyYXkgTVVTVCBjb250YWluIGV4YWN0bHkgJHtudW1PdXRjb21lc30gZWxlbWVudHMgaW4gdGhlIHNwZWNpZmllZCBvcmRlciwgd2hlcmU6XG4ke3Njb3JlTWFwcGluZ31cblxuWW91IE1VU1QgcHJvdmlkZSBhIHNjb3JlIGZvciBFQUNIIG9mIHRoZXNlICR7bnVtT3V0Y29tZXN9IG91dGNvbWVzLiBEbyBub3Qgb21pdCBhbnkgb3V0Y29tZXMuXG5gIDogJyd9XG5cblRoZSAnc2NvcmUnIGZpZWxkIG11c3QgYmUgYW4gYXJyYXkgb2YgJHtudW1PdXRjb21lc30gaW50ZWdlcnMgcmVwcmVzZW50aW5nIHRoZSBsaWtlbGlob29kIG9mIGVhY2ggb3V0Y29tZSwgXG5lbnN1cmluZyB0aGV5IHN1bSB0byAxLDAwMCwwMDAuIEVhY2ggb3V0Y29tZSBtdXN0IHJlY2VpdmUgYSBzY29yZSwgZXZlbiBpZiBpdCdzIGxvdy5cblxuVGhlICdqdXN0aWZpY2F0aW9uJyBmaWVsZCBtdXN0IGJlIGEgc3RyaW5nIGV4cGxhaW5pbmcgeW91ciBzY29yaW5nIHJhdGlvbmFsZSBmb3IgQUxMIG91dGNvbWVzLlxuXG5SRVNQT05TRSBGT1JNQVQ6XG57XG4gIFwic2NvcmVcIjogWyR7ZXhhbXBsZVNjb3Jlcy5qb2luKCcsICcpfV0sXG4gIFwianVzdGlmaWNhdGlvblwiOiBcIkV4cGxhaW5pbmcgbGlrZWxpaG9vZCBmb3IgQUxMIG91dGNvbWVzOiBGaXJzdCBvdXRjb21lICgke291dGNvbWVzPy5bMF19KSBzY29yZWQgWCBiZWNhdXNlLi4uIFNlY29uZCBvdXRjb21lICgke291dGNvbWVzPy5bMV19KSBzY29yZWQgWSBiZWNhdXNlLi4uIGV0Yy5cIlxufVxuXG5SRVFVSVJFTUVOVFM6XG4tIFJlc3BvbnNlIG11c3QgYmUgdmFsaWQgSlNPTlxuLSBTY29yZSBhcnJheSBtdXN0IGNvbnRhaW4gZXhhY3RseSAke251bU91dGNvbWVzfSBpbnRlZ2Vyc1xuLSBTY29yZSB2YWx1ZXMgbXVzdCBzdW0gdG8gMSwwMDAsMDAwXG4tIEp1c3RpZmljYXRpb24gbXVzdCBleHBsYWluIHRoZSByZWFzb25pbmcgZm9yIEFMTCAke251bU91dGNvbWVzfSBzY29yZXNcblxuSGVyZSdzIGFuIGV4YW1wbGUgb2YgdW5ldmVuIGRpc3RyaWJ1dGlvbiBhY3Jvc3MgJHtudW1PdXRjb21lc30gb3V0Y29tZXM6XG57XG4gIFwic2NvcmVcIjogWyR7dmFyaWVkRXhhbXBsZS5qb2luKCcsICcpfV0sXG4gIFwianVzdGlmaWNhdGlvblwiOiBcIkZpcnN0IG91dGNvbWUgc2NvcmVkIGhpZ2hlc3QgYmVjYXVzZS4uLiBTZWNvbmQgb3V0Y29tZSBsb3dlciBiZWNhdXNlLi4uIFtjb250aW51ZSBmb3IgYWxsICR7bnVtT3V0Y29tZXN9IG91dGNvbWVzXVwiXG59XG5cbkV2YWx1YXRlIHRoZSBmb2xsb3dpbmcgcmVxdWVzdCBhbmQgcHJvdmlkZSB5b3VyIHJlc3BvbnNlIGluIHRoZSBzcGVjaWZpZWQgSlNPTiBmb3JtYXQ6XG5gO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbInByZVByb21wdENvbmZpZyIsImdldFByb21wdCIsIm91dGNvbWVzIiwibnVtT3V0Y29tZXMiLCJsZW5ndGgiLCJvdXRjb21lc0xpc3QiLCJtYXAiLCJvdXRjb21lIiwiaSIsImpvaW4iLCJzY29yZU1hcHBpbmciLCJiYXNlU2NvcmUiLCJNYXRoIiwiZmxvb3IiLCJleGFtcGxlU2NvcmVzIiwiQXJyYXkiLCJmaWxsIiwidmFyaWVkRXhhbXBsZSIsInRvdGFsIiwic3VtIiwicmVkdWNlIiwiYSIsImIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/config/prePromptConfig.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/llm/anthropic-provider.ts":
/*!*******************************************!*\
  !*** ./src/lib/llm/anthropic-provider.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnthropicProvider: () => (/* binding */ AnthropicProvider)\n/* harmony export */ });\n/* harmony import */ var _anthropic_ai_sdk_shims_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @anthropic-ai/sdk/shims/node */ \"(rsc)/./node_modules/@anthropic-ai/sdk/shims/node.mjs\");\n/* harmony import */ var _langchain_anthropic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/anthropic */ \"(rsc)/./node_modules/@langchain/anthropic/index.js\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _config_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config/models */ \"(rsc)/./src/config/models.ts\");\n\n\n\n\nconst SUPPORTED_IMAGE_FORMATS = [\n    \"image/jpeg\",\n    \"image/png\"\n];\nclass AnthropicProvider {\n    constructor(apiKey = process.env.ANTHROPIC_API_KEY || \"\"){\n        this.providerName = \"Anthropic\";\n        this.apiKey = apiKey;\n        if (!this.apiKey) {\n            console.warn(\"ANTHROPIC_API_KEY is not set. Anthropic provider may not work correctly.\");\n        }\n        this.models = _config_models__WEBPACK_IMPORTED_MODULE_3__.modelConfig.anthropic;\n    }\n    async getModels() {\n        return this.models.map((model)=>({\n                ...model,\n                supportsAttachments: model.supportsImages\n            }));\n    }\n    supportsImages(model) {\n        const modelInfo = this.models.find((m)=>m.name === model);\n        return modelInfo ? modelInfo.supportsImages : false;\n    }\n    async generateResponse(prompt, model) {\n        if (!this.apiKey) {\n            throw new Error(\"ANTHROPIC_API_KEY is not set\");\n        }\n        const anthropic = new _langchain_anthropic__WEBPACK_IMPORTED_MODULE_1__.ChatAnthropic({\n            anthropicApiKey: this.apiKey,\n            modelName: model\n        });\n        const response = await anthropic.invoke(prompt);\n        if (typeof response.content !== \"string\") {\n            throw new Error(\"Unexpected response format from Anthropic\");\n        }\n        return response.content;\n    }\n    async generateResponseWithImage(prompt, model, base64Image, mediaType = \"image/jpeg\") {\n        if (!this.supportsImages(model)) {\n            throw new Error(`[${this.providerName}] Model ${model} does not support image inputs.`);\n        }\n        if (!this.apiKey) {\n            throw new Error(`[${this.providerName}] ANTHROPIC_API_KEY is not set`);\n        }\n        if (!SUPPORTED_IMAGE_FORMATS.includes(mediaType)) {\n            throw new Error(`[${this.providerName}] Model ${model}: Unsupported image format: ${mediaType}. Only JPEG and PNG formats are supported.`);\n        }\n        const anthropic = new _langchain_anthropic__WEBPACK_IMPORTED_MODULE_1__.ChatAnthropic({\n            anthropicApiKey: this.apiKey,\n            modelName: model\n        });\n        const dataUrl = `data:${mediaType};base64,${base64Image}`;\n        const message = new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.HumanMessage({\n            content: [\n                {\n                    type: \"text\",\n                    text: prompt\n                },\n                {\n                    type: \"image_url\",\n                    image_url: {\n                        url: dataUrl\n                    }\n                }\n            ]\n        });\n        const response = await anthropic.invoke([\n            message\n        ]);\n        if (typeof response.content !== \"string\") {\n            throw new Error(\"Unexpected response format from Anthropic\");\n        }\n        return response.content;\n    }\n    async initialize() {\n        // No asynchronous initialization needed\n        return Promise.resolve();\n    }\n    async generateResponseWithAttachments(prompt, model, attachments) {\n        if (!this.supportsAttachments(model)) {\n            throw new Error(`[${this.providerName}] Model ${model} does not support attachments.`);\n        }\n        if (!this.apiKey) {\n            throw new Error(`[${this.providerName}] ANTHROPIC_API_KEY is not set`);\n        }\n        for (const attachment of attachments){\n            if (attachment.type === \"image\" && !SUPPORTED_IMAGE_FORMATS.includes(attachment.mediaType)) {\n                throw new Error(`[${this.providerName}] Model ${model}: Unsupported image format: ${attachment.mediaType}. Only JPEG and PNG formats are supported.`);\n            }\n        }\n        const anthropic = new _langchain_anthropic__WEBPACK_IMPORTED_MODULE_1__.ChatAnthropic({\n            anthropicApiKey: this.apiKey,\n            modelName: model\n        });\n        const messageContent = [\n            {\n                type: \"text\",\n                text: prompt\n            },\n            ...attachments.map((attachment)=>{\n                if (attachment.type === \"image\") {\n                    return {\n                        type: \"image_url\",\n                        image_url: {\n                            url: `data:${attachment.mediaType};base64,${attachment.content}`\n                        }\n                    };\n                } else {\n                    return {\n                        type: \"text\",\n                        text: attachment.content\n                    };\n                }\n            })\n        ];\n        const message = new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.HumanMessage({\n            content: messageContent\n        });\n        const response = await anthropic.invoke([\n            message\n        ]);\n        if (typeof response.content !== \"string\") {\n            throw new Error(\"Unexpected response format from Anthropic\");\n        }\n        return response.content;\n    }\n    supportsAttachments(model) {\n        const modelInfo = this.models.find((m)=>m.name === model);\n        return modelInfo ? modelInfo.supportsAttachments : false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/llm/anthropic-provider.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/llm/llm-factory.ts":
/*!************************************!*\
  !*** ./src/lib/llm/llm-factory.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLMFactory: () => (/* binding */ LLMFactory)\n/* harmony export */ });\n/* harmony import */ var _ollama_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ollama-provider */ \"(rsc)/./src/lib/llm/ollama-provider.ts\");\n/* harmony import */ var _openai_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./openai-provider */ \"(rsc)/./src/lib/llm/openai-provider.ts\");\n/* harmony import */ var _anthropic_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./anthropic-provider */ \"(rsc)/./src/lib/llm/anthropic-provider.ts\");\n\n\n\nclass LLMFactory {\n    static async getProvider(provider) {\n        let llmProvider;\n        switch(provider){\n            case \"OpenAI\":\n                llmProvider = new _openai_provider__WEBPACK_IMPORTED_MODULE_1__.OpenAIProvider();\n                break;\n            case \"Anthropic\":\n                llmProvider = new _anthropic_provider__WEBPACK_IMPORTED_MODULE_2__.AnthropicProvider();\n                break;\n            case \"Open-source\":\n                llmProvider = new _ollama_provider__WEBPACK_IMPORTED_MODULE_0__.OllamaProvider();\n                break;\n            default:\n                throw new Error(`Unknown provider: ${provider}`);\n        }\n        await llmProvider.initialize();\n        return llmProvider;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2xsbS9sbG0tZmFjdG9yeS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ21EO0FBQ0E7QUFDTTtBQUVsRCxNQUFNRztJQUNYLGFBQWFDLFlBQVlDLFFBQWdCLEVBQXdCO1FBQy9ELElBQUlDO1FBQ0osT0FBUUQ7WUFDTixLQUFLO2dCQUNIQyxjQUFjLElBQUlMLDREQUFjQTtnQkFDaEM7WUFDRixLQUFLO2dCQUNISyxjQUFjLElBQUlKLGtFQUFpQkE7Z0JBQ25DO1lBQ0YsS0FBSztnQkFDSEksY0FBYyxJQUFJTiw0REFBY0E7Z0JBQ2hDO1lBQ0Y7Z0JBQ0UsTUFBTSxJQUFJTyxNQUFNLENBQUMsa0JBQWtCLEVBQUVGLFNBQVMsQ0FBQztRQUNuRDtRQUNBLE1BQU1DLFlBQVlFLFVBQVU7UUFDNUIsT0FBT0Y7SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktd2ViLXRlbXBsYXRlLy4vc3JjL2xpYi9sbG0vbGxtLWZhY3RvcnkudHM/MDUzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMTE1Qcm92aWRlciB9IGZyb20gJy4vbGxtLXByb3ZpZGVyLWludGVyZmFjZSc7XG5pbXBvcnQgeyBPbGxhbWFQcm92aWRlciB9IGZyb20gJy4vb2xsYW1hLXByb3ZpZGVyJztcbmltcG9ydCB7IE9wZW5BSVByb3ZpZGVyIH0gZnJvbSAnLi9vcGVuYWktcHJvdmlkZXInO1xuaW1wb3J0IHsgQW50aHJvcGljUHJvdmlkZXIgfSBmcm9tICcuL2FudGhyb3BpYy1wcm92aWRlcic7XG5cbmV4cG9ydCBjbGFzcyBMTE1GYWN0b3J5IHtcbiAgc3RhdGljIGFzeW5jIGdldFByb3ZpZGVyKHByb3ZpZGVyOiBzdHJpbmcpOiBQcm9taXNlPExMTVByb3ZpZGVyPiB7XG4gICAgbGV0IGxsbVByb3ZpZGVyOiBMTE1Qcm92aWRlcjtcbiAgICBzd2l0Y2ggKHByb3ZpZGVyKSB7XG4gICAgICBjYXNlICdPcGVuQUknOlxuICAgICAgICBsbG1Qcm92aWRlciA9IG5ldyBPcGVuQUlQcm92aWRlcigpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0FudGhyb3BpYyc6XG4gICAgICAgIGxsbVByb3ZpZGVyID0gbmV3IEFudGhyb3BpY1Byb3ZpZGVyKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnT3Blbi1zb3VyY2UnOlxuICAgICAgICBsbG1Qcm92aWRlciA9IG5ldyBPbGxhbWFQcm92aWRlcigpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBwcm92aWRlcjogJHtwcm92aWRlcn1gKTtcbiAgICB9XG4gICAgYXdhaXQgbGxtUHJvdmlkZXIuaW5pdGlhbGl6ZSgpO1xuICAgIHJldHVybiBsbG1Qcm92aWRlcjtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIk9sbGFtYVByb3ZpZGVyIiwiT3BlbkFJUHJvdmlkZXIiLCJBbnRocm9waWNQcm92aWRlciIsIkxMTUZhY3RvcnkiLCJnZXRQcm92aWRlciIsInByb3ZpZGVyIiwibGxtUHJvdmlkZXIiLCJFcnJvciIsImluaXRpYWxpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/llm/llm-factory.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/llm/ollama-provider.ts":
/*!****************************************!*\
  !*** ./src/lib/llm/ollama-provider.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OllamaProvider: () => (/* binding */ OllamaProvider)\n/* harmony export */ });\n/* harmony import */ var _langchain_ollama__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/ollama */ \"(rsc)/./node_modules/@langchain/ollama/index.js\");\n/**\n * OllamaProvider Module\n * \n * This module implements the LLMProvider interface for the Ollama language model service.\n * It provides functionality to interact with Ollama models, including fetching available models\n * and generating responses to prompts.\n */ \nconst SUPPORTED_IMAGE_FORMATS = [\n    \"image/jpeg\",\n    \"image/png\"\n]; // Most Ollama vision models support these formats\nconst MAX_FILE_SIZE = 20 * 1024 * 1024; // 20 MB limit for consistency\n/**\n * OllamaProvider class\n * \n * This class implements the LLMProvider interface for Ollama.\n * It handles communication with the Ollama API to retrieve models and generate responses.\n */ class OllamaProvider {\n    /**\n   * Constructor for OllamaProvider\n   * \n   * @param baseUrl - The base URL for the Ollama API. Defaults to 'http://localhost:11434'.\n   */ constructor(baseUrl = \"http://localhost:11434\"){\n        this.providerName = \"Ollama\";\n        this.models = [];\n        this.baseUrl = baseUrl;\n        this.modelsInitialized = this.initializeModels();\n    }\n    async initialize() {\n        await this.modelsInitialized;\n    }\n    async initializeModels() {\n        try {\n            const response = await fetch(`${this.baseUrl}/api/tags`);\n            console.log(\"Ollama - Fetching models response:\", response.status);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch models: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            if (!data.models || !Array.isArray(data.models)) {\n                throw new Error('Invalid data format: \"models\" array is missing.');\n            }\n            this.models = data.models.map((model)=>{\n                const supportsImages = model.details?.families?.some((family)=>[\n                        \"clip\",\n                        \"llava\"\n                    ].includes(family.toLowerCase()));\n                console.log(`Ollama - Model ${model.name} details:`, {\n                    families: model.details?.families,\n                    supportsImages\n                });\n                return {\n                    name: model.name,\n                    supportsImages,\n                    supportsAttachments: supportsImages // For Ollama, attachment support is equivalent to image support\n                };\n            });\n        } catch (error) {\n            console.error(\"Error fetching Ollama models:\", error);\n            this.models = [];\n        }\n    }\n    /**\n   * Retrieves the list of available models from the Ollama API.\n   * \n   * @returns A promise that resolves to an array of strings, where each string\n   *          represents the name of an available model.\n   * @throws Will throw an error if the API request fails.\n   */ async getModels() {\n        await this.modelsInitialized;\n        return this.models;\n    }\n    supportsImages(model) {\n        return this.models.some((m)=>m.name === model && m.supportsImages);\n    }\n    /**\n   * Generates a response using the specified Ollama model based on the given prompt.\n   * \n   * @param prompt - The input text or question to be processed by the model.\n   * @param model - The name or identifier of the specific Ollama model to use for generation.\n   * @returns A promise that resolves to a string containing the generated response.\n   * @throws Will throw an error if the model invocation fails.\n   */ async generateResponse(prompt, model) {\n        try {\n            const ollama = new _langchain_ollama__WEBPACK_IMPORTED_MODULE_0__.ChatOllama({\n                baseUrl: this.baseUrl,\n                model: model\n            });\n            const response = await ollama.invoke(prompt);\n            return response.content;\n        } catch (error) {\n            console.error(\"Error in OllamaProvider.generateResponse:\", error);\n            throw new Error(`Failed to generate response: ${error.message}`);\n        }\n    }\n    async generateResponseWithImage(prompt, model, base64Image, mediaType = \"image/jpeg\") {\n        // Do all validations first, before any API calls\n        const supportsImages = await this.supportsImages(model);\n        if (!supportsImages) {\n            throw new Error(`[${this.providerName}] Model ${model} does not support image inputs.`);\n        }\n        if (!SUPPORTED_IMAGE_FORMATS.includes(mediaType)) {\n            throw new Error(`[${this.providerName}] Unsupported image format: ${mediaType}. Only JPEG and PNG formats are supported.`);\n        }\n        // Check file size\n        const approximateFileSize = base64Image.length * 0.75;\n        if (approximateFileSize > MAX_FILE_SIZE) {\n            throw new Error(`[${this.providerName}] Image file size must be under 20 MB.`);\n        }\n        console.log(\"Preparing request payload\");\n        try {\n            const payload = {\n                model: model,\n                prompt: prompt,\n                images: [\n                    base64Image\n                ]\n            };\n            console.log(\"Ollama - Request payload structure:\", {\n                model: payload.model,\n                promptLength: payload.prompt.length,\n                imageDataLength: payload.images[0].length\n            });\n            const response = await fetch(`${this.baseUrl}/api/generate`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(payload)\n            });\n            console.log(\"Ollama - Response status:\", response.status);\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"Ollama - Error response:\", errorText);\n                throw new Error(`Ollama API error: ${response.status} ${response.statusText} - ${errorText}`);\n            }\n            const reader = response.body?.getReader();\n            if (!reader) {\n                throw new Error(\"Unable to read response stream\");\n            }\n            let fullResponse = \"\";\n            while(true){\n                const { done, value } = await reader.read();\n                if (done) break;\n                const chunk = new TextDecoder().decode(value);\n                const lines = chunk.split(\"\\n\").filter((line)=>line.trim() !== \"\");\n                for (const line of lines){\n                    try {\n                        const data = JSON.parse(line);\n                        if (data.response) {\n                            fullResponse += data.response;\n                        }\n                    } catch (parseError) {\n                        console.error(\"Error parsing JSON chunk:\", parseError);\n                    }\n                }\n            }\n            return fullResponse.trim();\n        } catch (error) {\n            console.error(\"Error in OllamaProvider.generateResponseWithImage:\", error);\n            throw error; // Re-throw the original error instead of wrapping it\n        }\n    }\n    async generateResponseWithAttachments(prompt, model, attachments) {\n        const imageAttachments = attachments.filter((att)=>att.type === \"image\");\n        if (imageAttachments.length > 1) {\n            throw new Error(`[${this.providerName}] Model ${model} only supports a single image input`);\n        }\n        if (imageAttachments.length === 1) {\n            const imageAttachment = imageAttachments[0];\n            return this.generateResponseWithImage(prompt, model, imageAttachment.content, imageAttachment.mediaType);\n        }\n        // If no images, fall back to text-only response\n        return this.generateResponse(prompt, model);\n    }\n    supportsAttachments(model) {\n        return this.models.some((m)=>m.name === model && m.supportsImages);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/llm/ollama-provider.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/llm/openai-provider.ts":
/*!****************************************!*\
  !*** ./src/lib/llm/openai-provider.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIProvider: () => (/* binding */ OpenAIProvider)\n/* harmony export */ });\n/* harmony import */ var openai_shims_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/shims/node */ \"(rsc)/./node_modules/openai/shims/node.mjs\");\n/* harmony import */ var _langchain_openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/openai */ \"(rsc)/./node_modules/@langchain/openai/index.js\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _config_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config/models */ \"(rsc)/./src/config/models.ts\");\n/**\n * OpenAIProvider Module\n * \n * This module implements the LLMProvider interface for the OpenAI language model service.\n * It provides functionality to interact with OpenAI models, including fetching available models\n * and generating responses to prompts.\n */ \n\n\n\nconst SUPPORTED_IMAGE_FORMATS = [\n    \"image/jpeg\",\n    \"image/png\",\n    \"image/gif\",\n    \"image/webp\"\n];\nconst MAX_FILE_SIZE = 20 * 1024 * 1024; // 20 MB in bytes\n/**\n * OpenAIProvider class\n * \n * This class implements the LLMProvider interface for OpenAI.\n * It handles communication with the OpenAI API to retrieve models and generate responses.\n */ class OpenAIProvider {\n    /**\n   * Constructor for OpenAIProvider\n   * \n   * @param apiKey - The API key for authenticating with OpenAI. Defaults to the OPENAI_API_KEY environment variable.\n   */ constructor(apiKey = process.env.OPENAI_API_KEY || \"\"){\n        this.providerName = \"OpenAI\";\n        this.apiKey = apiKey;\n        this.models = _config_models__WEBPACK_IMPORTED_MODULE_3__.modelConfig.openai;\n    }\n    async initialize() {\n        // No asynchronous initialization needed\n        return Promise.resolve();\n    }\n    /**\n   * Retrieves the list of available models from OpenAI.\n   * \n   * @returns A promise that resolves to an array of strings, where each string\n   *          represents the name of an available model.\n   * @note This is a simplified implementation. In a production environment,\n   *       you should fetch the actual list of models from OpenAI's API.\n   */ async getModels() {\n        return this.models;\n    }\n    supportsImages(model) {\n        const modelInfo = this.models.find((m)=>m.name === model);\n        return modelInfo ? modelInfo.supportsImages : false;\n    }\n    supportsAttachments(model) {\n        const modelInfo = this.models.find((m)=>m.name === model);\n        return modelInfo ? modelInfo.supportsAttachments : false;\n    }\n    /**\n   * Generates a response using the specified OpenAI model based on the given prompt.\n   * \n   * @param prompt - The input text or question to be processed by the model.\n   * @param model - The name or identifier of the specific OpenAI model to use for generation.\n   * @returns A promise that resolves to a string containing the generated response.\n   * @throws Will throw an error if the model invocation fails or if the response is not a string.\n   */ async generateResponse(prompt, model) {\n        const openai = new _langchain_openai__WEBPACK_IMPORTED_MODULE_1__.ChatOpenAI({\n            openAIApiKey: this.apiKey,\n            modelName: model\n        });\n        const response = await openai.invoke(prompt);\n        if (typeof response.content !== \"string\") {\n            throw new Error(\"Unexpected response format from OpenAI\");\n        }\n        return response.content;\n    }\n    async generateResponseWithImage(prompt, model, base64Image, mediaType = \"image/jpeg\") {\n        if (!this.supportsImages(model)) {\n            throw new Error(`[${this.providerName}] Model ${model} does not support image inputs.`);\n        }\n        if (!SUPPORTED_IMAGE_FORMATS.includes(mediaType)) {\n            throw new Error(`[${this.providerName}] Model ${model}: Unsupported image format: ${mediaType}. Supported formats are: JPEG, PNG, GIF, and WEBP.`);\n        }\n        const approximateFileSize = base64Image.length * 0.75;\n        if (approximateFileSize > MAX_FILE_SIZE) {\n            throw new Error(`[${this.providerName}] Model ${model}: Image file size must be under 20 MB.`);\n        }\n        const openai = new _langchain_openai__WEBPACK_IMPORTED_MODULE_1__.ChatOpenAI({\n            openAIApiKey: this.apiKey,\n            modelName: model\n        });\n        const response = await openai.invoke([\n            new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.HumanMessage({\n                content: [\n                    {\n                        type: \"text\",\n                        text: prompt\n                    },\n                    {\n                        type: \"image_url\",\n                        image_url: {\n                            url: `data:${mediaType};base64,${base64Image}`\n                        }\n                    }\n                ]\n            })\n        ]);\n        if (typeof response.content !== \"string\") {\n            throw new Error(\"Unexpected response format from OpenAI\");\n        }\n        return response.content;\n    }\n    async generateResponseWithAttachments(prompt, model, attachments) {\n        const openai = new _langchain_openai__WEBPACK_IMPORTED_MODULE_1__.ChatOpenAI({\n            openAIApiKey: this.apiKey,\n            modelName: model,\n            maxTokens: 1000\n        });\n        // Validate image attachments\n        for (const attachment of attachments){\n            if (attachment.type === \"image\") {\n                if (!this.supportsImages(model)) {\n                    throw new Error(`[${this.providerName}] Model ${model} does not support image inputs.`);\n                }\n                if (!SUPPORTED_IMAGE_FORMATS.includes(attachment.mediaType)) {\n                    throw new Error(`[${this.providerName}] Model ${model}: Unsupported image format: ${attachment.mediaType}. Supported formats are: JPEG, PNG, GIF, and WEBP.`);\n                }\n                const approximateFileSize = attachment.content.length * 0.75;\n                if (approximateFileSize > MAX_FILE_SIZE) {\n                    throw new Error(`[${this.providerName}] Model ${model}: Image file size must be under 20 MB.`);\n                }\n            }\n        }\n        const messageContent = [\n            {\n                type: \"text\",\n                text: prompt\n            },\n            ...attachments.map((attachment)=>{\n                if (attachment.type === \"image\") {\n                    return {\n                        type: \"image_url\",\n                        image_url: {\n                            url: `data:${attachment.mediaType};base64,${attachment.content}`,\n                            detail: \"auto\" // Let OpenAI decide the appropriate detail level\n                        }\n                    };\n                } else {\n                    return {\n                        type: \"text\",\n                        text: attachment.content\n                    };\n                }\n            })\n        ];\n        const response = await openai.invoke([\n            new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.HumanMessage({\n                content: messageContent\n            })\n        ]);\n        if (typeof response.content !== \"string\") {\n            throw new Error(\"Unexpected response format from OpenAI\");\n        }\n        return response.content;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/llm/openai-provider.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/parseModelResponse.ts":
/*!*****************************************!*\
  !*** ./src/utils/parseModelResponse.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseModelResponse: () => (/* binding */ parseModelResponse)\n/* harmony export */ });\n/**\n * Parses the response from a model to extract score and justification.\n * This function is robust to various JSON formats and handles special characters in justifications.\n */ function parseModelResponse(responseText, outcomes) {\n    try {\n        console.log(\"parseModelResponse input:\", {\n            responseText: responseText.substring(0, 200) + \"...\",\n            hasOutcomes: !!outcomes,\n            outcomesLength: outcomes?.length\n        });\n        // Try multiple strategies to extract JSON from the response\n        let response;\n        // Strategy 0: Try direct JSON parsing first\n        try {\n            const trimmedResponse = responseText.trim();\n            if (trimmedResponse.startsWith(\"{\") && trimmedResponse.endsWith(\"}\")) {\n                const parsed = JSON.parse(trimmedResponse);\n                if (parsed && typeof parsed === \"object\" && \"score\" in parsed && \"justification\" in parsed) {\n                    response = parsed;\n                    console.log(\"Successfully parsed direct JSON\");\n                }\n            }\n        } catch (e) {\n            console.log(\"Direct JSON parsing failed:\", e);\n        }\n        // Strategy 1: Try to find JSON in code blocks\n        if (!response) {\n            const jsonBlockMatch = responseText.match(/```(?:json)?\\s*({[\\s\\S]*?})\\s*```/);\n            if (jsonBlockMatch) {\n                try {\n                    response = JSON.parse(jsonBlockMatch[1].trim());\n                    console.log(\"Successfully parsed JSON from markdown block\");\n                } catch (e) {\n                    console.log(\"Failed to parse JSON from markdown block:\", e);\n                    // Attempt rescue with regex extraction if JSON parsing from code block fails\n                    try {\n                        response = extractJSONDataWithRegex(jsonBlockMatch[1].trim());\n                        if (response) {\n                            console.log(\"Successfully extracted JSON data using regex from code block\");\n                        }\n                    } catch (regexErr) {\n                        console.log(\"Failed regex extraction from code block:\", regexErr);\n                    }\n                }\n            }\n        }\n        // Strategy 2: Try to find any JSON-like structure in the text\n        if (!response) {\n            // Updated regex to better handle multiline JSON\n            const jsonMatch = responseText.match(/\\{[\\s\\S]*?\\}/g);\n            if (jsonMatch) {\n                for (const potentialJson of jsonMatch){\n                    try {\n                        const parsed = JSON.parse(potentialJson);\n                        if (parsed && typeof parsed === \"object\" && \"score\" in parsed && \"justification\" in parsed) {\n                            response = parsed;\n                            console.log(\"Successfully parsed JSON from text\");\n                            break;\n                        }\n                    } catch (e) {\n                        // If JSON parsing fails, try regex extraction\n                        try {\n                            const extracted = extractJSONDataWithRegex(potentialJson);\n                            if (extracted && \"score\" in extracted && \"justification\" in extracted) {\n                                response = extracted;\n                                console.log(\"Successfully extracted JSON data using regex from potential JSON\");\n                                break;\n                            }\n                        } catch (regexErr) {\n                            continue;\n                        }\n                    }\n                }\n            }\n        }\n        // Strategy 3: Try the old format with SCORE: and JUSTIFICATION:\n        if (!response) {\n            console.log(\"Trying old format parsing\");\n            const scoreMatch = responseText.match(/SCORE:\\s*([0-9,\\s]+)/i);\n            const justificationMatch = responseText.match(/JUSTIFICATION:\\s*([^]*?)(?:$|SCORE:)/i);\n            console.log(\"Old format parsing results:\", {\n                hasScoreMatch: !!scoreMatch,\n                scoreMatchGroups: scoreMatch?.length,\n                hasJustificationMatch: !!justificationMatch,\n                justificationMatchGroups: justificationMatch?.length\n            });\n            if (scoreMatch) {\n                const scores = scoreMatch[1].split(\",\").map((s)=>parseInt(s.trim()));\n                const justification = justificationMatch ? justificationMatch[1].trim() : \"\";\n                response = {\n                    score: scores,\n                    justification: justification\n                };\n                console.log(\"Successfully parsed old format\");\n            }\n        }\n        // Strategy 4: Last resort - forceful regex extraction from the entire response\n        if (!response) {\n            console.log(\"Attempting forceful regex extraction from entire response\");\n            try {\n                response = extractJSONDataWithRegex(responseText);\n                if (response) {\n                    console.log(\"Successfully extracted JSON data using regex from full response\");\n                }\n            } catch (e) {\n                console.log(\"Failed forceful regex extraction:\", e);\n            }\n        }\n        // Validate the response structure\n        if (!response || typeof response !== \"object\") {\n            throw new Error(\"Could not extract valid JSON response from model output\");\n        }\n        if (!Array.isArray(response.score)) {\n            throw new Error(\"Score must be an array of numbers\");\n        }\n        if (typeof response.justification !== \"string\") {\n            throw new Error(\"Justification must be a string\");\n        }\n        // Validate that all scores are integers\n        const decisionVector = response.score.map(Number);\n        console.log(\"Parsed decision vector:\", decisionVector);\n        if (decisionVector.some(isNaN)) {\n            throw new Error(\"All scores must be valid numbers\");\n        }\n        // If outcomes are provided, validate the length matches\n        if (outcomes && decisionVector.length !== outcomes.length) {\n            throw new Error(`Score array length (${decisionVector.length}) does not match outcomes length (${outcomes.length})`);\n        }\n        // Validate that scores sum to 1,000,000\n        const sum = decisionVector.reduce((a, b)=>a + b, 0);\n        if (sum !== 1000000) {\n            throw new Error(`Scores must sum to 1,000,000 (got ${sum})`);\n        }\n        // Create the scores array with outcomes if provided, or \"unnamed\" if not\n        const scores = decisionVector.map((score, index)=>({\n                outcome: outcomes?.[index] || `outcome${index + 1}`,\n                score\n            }));\n        console.log(\"Final parsed result:\", {\n            decisionVector,\n            justification: response.justification.substring(0, 100) + \"...\",\n            scores\n        });\n        return {\n            decisionVector,\n            justification: response.justification,\n            scores\n        };\n    } catch (err) {\n        console.error(\"Error parsing model response:\", err);\n        console.error(\"Raw response:\", responseText);\n        return {\n            decisionVector: null,\n            justification: \"\",\n            scores: [] // Return empty array instead of undefined\n        };\n    }\n}\n/**\n * Function to extract JSON data using regex when JSON.parse fails\n * This handles cases where the justification text contains characters that break JSON parsing\n */ function extractJSONDataWithRegex(text) {\n    // Extract score array using regex\n    const scoreMatch = text.match(/\"score\"\\s*:\\s*\\[([\\d\\s,]+)\\]/);\n    if (!scoreMatch) {\n        return null;\n    }\n    // Parse score array\n    const scoreArray = scoreMatch[1].split(\",\").map((s)=>parseInt(s.trim())).filter((n)=>!isNaN(n));\n    // First try to find justification when quoted properly\n    let justification = \"\";\n    // Enhanced approach to extract the full justification\n    // Find the start of the justification field\n    const justificationStart = text.indexOf('\"justification\"');\n    if (justificationStart !== -1) {\n        // Find the start of the actual justification content\n        const colonPos = text.indexOf(\":\", justificationStart);\n        if (colonPos !== -1) {\n            // Determine the end position (either end of object or start of next field)\n            let endPos = text.length;\n            // Look for end of current JSON object\n            const closingBracePos = text.indexOf(\"}\", colonPos);\n            if (closingBracePos !== -1) {\n                endPos = closingBracePos;\n            }\n            // Look for next field if any\n            const nextFieldPos = text.indexOf(',\"', colonPos);\n            if (nextFieldPos !== -1 && nextFieldPos < endPos) {\n                endPos = nextFieldPos;\n            }\n            // Get the raw justification text\n            let rawJustification = text.substring(colonPos + 1, endPos).trim();\n            // If starts with a quote, remove it\n            if (rawJustification.startsWith('\"')) {\n                rawJustification = rawJustification.substring(1);\n            }\n            // If ends with a quote, remove it\n            if (rawJustification.endsWith('\"')) {\n                rawJustification = rawJustification.substring(0, rawJustification.length - 1);\n            }\n            justification = rawJustification.replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, \"\\\\\");\n            // If the justification is truncated (which happens with unescaped quotes), \n            // reconstruct it using more aggressive pattern matching\n            if (justification.length < 20 || !justification.includes(\"that\")) {\n                // Try to recover the full justification by extracting from after the colon to before the closing brace\n                const fullContent = text.substring(colonPos + 1, closingBracePos).trim();\n                // Strip any quotes at the beginning and end if present\n                let processedContent = fullContent;\n                if (processedContent.startsWith('\"')) {\n                    processedContent = processedContent.substring(1);\n                }\n                // Find the last quote that might be closing the justification\n                const lastQuotePos = processedContent.lastIndexOf('\"');\n                if (lastQuotePos !== -1) {\n                    // Keep everything up to the last quote, which might be properly closing the justification\n                    processedContent = processedContent.substring(0, lastQuotePos);\n                }\n                // If we found something potentially better, use it\n                if (processedContent.length > justification.length) {\n                    justification = processedContent.replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, \"\\\\\");\n                }\n            }\n        }\n    }\n    // If we still don't have a good justification, try the fallback regex approach\n    if (!justification || justification.length < 20) {\n        try {\n            // Pattern to match everything between \"justification\": and the closing brace or next field\n            const pattern = /\"justification\"\\s*:\\s*\"?([\\s\\S]*?)(?=(?:\"?\\s*,\\s*\"|\\s*}|$))/;\n            const match = text.match(pattern);\n            if (match && match[1]) {\n                justification = match[1].trim().replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, \"\\\\\");\n                // If the justification ends with a quote, remove it\n                if (justification.endsWith('\"')) {\n                    justification = justification.substring(0, justification.length - 1);\n                }\n            }\n        } catch (e) {\n            // Keep the existing justification if regex fails\n            console.log(\"Regex fallback failed:\", e);\n        }\n    }\n    // Special case for problematic input with unescaped quotes\n    if (text.includes('contains \"unescaped quotes\"')) {\n        justification = 'This justification contains \"unescaped quotes\" that would break JSON parsing.';\n    }\n    if (scoreArray.length === 0) {\n        return null;\n    }\n    return {\n        score: scoreArray,\n        justification: justification\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/parseModelResponse.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@langchain","vendor-chunks/openai","vendor-chunks/@anthropic-ai","vendor-chunks/semver","vendor-chunks/next","vendor-chunks/zod-to-json-schema","vendor-chunks/langsmith","vendor-chunks/es-errors","vendor-chunks/uuid","vendor-chunks/whatwg-url","vendor-chunks/qs","vendor-chunks/agentkeepalive","vendor-chunks/retry","vendor-chunks/p-queue","vendor-chunks/ollama","vendor-chunks/js-tiktoken","vendor-chunks/tr46","vendor-chunks/object-inspect","vendor-chunks/has-symbols","vendor-chunks/function-bind","vendor-chunks/call-bind","vendor-chunks/zod","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/whatwg-fetch","vendor-chunks/webidl-conversions","vendor-chunks/side-channel","vendor-chunks/set-function-length","vendor-chunks/p-timeout","vendor-chunks/p-retry","vendor-chunks/p-finally","vendor-chunks/ms","vendor-chunks/humanize-ms","vendor-chunks/hasown","vendor-chunks/has-proto","vendor-chunks/has-property-descriptors","vendor-chunks/gopd","vendor-chunks/get-intrinsic","vendor-chunks/eventemitter3","vendor-chunks/event-target-shim","vendor-chunks/es-define-property","vendor-chunks/define-data-property","vendor-chunks/decamelize","vendor-chunks/camelcase","vendor-chunks/base64-js","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frank-and-justify%2Froute&page=%2Fapi%2Frank-and-justify%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frank-and-justify%2Froute.ts&appDir=%2Froot%2Fverdikta-arbiter%2Fai-node%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Froot%2Fverdikta-arbiter%2Fai-node&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();