{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Verdikta Arbiter Node Installation Guide","text":"<p>Welcome to the comprehensive installation guide for the Verdikta Arbiter Node. This documentation will help you set up a complete Chainlink-based arbitration node that processes dispute resolution requests using advanced AI models.</p>"},{"location":"#what-is-verdikta-arbiter","title":"What is Verdikta Arbiter?","text":"<p>Verdikta Arbiter is a decentralized oracle system that provides AI-powered dispute resolution services on blockchain networks. It combines:</p> <ul> <li>AI-powered Decision Making: Uses state-of-the-art language models (GPT-4, Claude) for intelligent adjudication</li> <li>Chainlink Integration: Built on Chainlink's proven oracle infrastructure for reliability and security</li> <li>Reputation System: Tracks oracle performance and builds trust through transparent scoring</li> <li>Multi-chain Support: Currently supports Base Sepolia with plans for additional networks</li> </ul>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"<ul> <li> <p> Quick Start</p> <p>Get your arbiter node running in minutes with our automated installer</p> <p> Quick Start Guide</p> </li> <li> <p> Prerequisites</p> <p>Check system requirements and prepare your environment</p> <p> View Prerequisites</p> </li> <li> <p> Installation</p> <p>Step-by-step installation guides for automated and manual setup</p> <p> Installation Guide</p> </li> <li> <p> Management</p> <p>Learn how to manage, monitor, and maintain your arbiter node</p> <p> Management Guide</p> </li> </ul>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<p>The Verdikta Arbiter Node consists of several integrated components:</p> <pre><code>graph TB\n    A[Client Request] --&gt; B[Chainlink Node]\n    B --&gt; C[External Adapter]\n    C --&gt; D[AI Node]\n    D --&gt; E[LLM Models]\n    E --&gt; D\n    D --&gt; C\n    C --&gt; B\n    B --&gt; F[Smart Contract]\n    F --&gt; G[Blockchain Response]\n\n    H[PostgreSQL] --&gt; B\n    I[IPFS Storage] --&gt; D\n\n    subgraph \"Verdikta Arbiter Node\"\n        B\n        C\n        D\n        H\n    end\n\n    subgraph \"External Services\"\n        E\n        I\n    end</code></pre>"},{"location":"#core-components","title":"Core Components","text":"<ul> <li>Chainlink Node: Oracle infrastructure that handles blockchain interactions</li> <li>External Adapter: Bridge between Chainlink and the AI processing system</li> <li>AI Node: Core service that processes adjudication requests using language models</li> <li>PostgreSQL Database: Stores Chainlink node data and job history</li> <li>Smart Contracts: On-chain components for request handling and reputation management</li> </ul>"},{"location":"#installation-options","title":"Installation Options","text":"<p>Choose the installation method that best fits your needs:</p>"},{"location":"#automated-installation-recommended","title":"Automated Installation (Recommended)","text":"<p>Perfect for most users who want a quick, hassle-free setup:</p> <pre><code>cd verdikta-arbiter/installer\nbash bin/install.sh\n</code></pre> <p>Features: - Interactive setup with guided prompts - Automatic dependency installation - Environment configuration - Smart contract deployment - Oracle registration</p>"},{"location":"#manual-installation","title":"Manual Installation","text":"<p>For advanced users who need fine-grained control:</p> <ul> <li>Step-by-step component installation</li> <li>Custom configuration options  </li> <li>Detailed troubleshooting capabilities</li> <li>Educational value for understanding the system</li> </ul>"},{"location":"#system-requirements","title":"System Requirements","text":"<p>Minimum Requirements</p> <ul> <li>OS: Ubuntu 20.04+, macOS 11+, or Windows with WSL2</li> <li>RAM: 6GB minimum (8GB+ recommended)</li> <li>Storage: 100GB available space</li> <li>CPU: 2+ cores recommended</li> <li>Network: Stable internet connection</li> </ul>"},{"location":"#api-keys-required","title":"API Keys Required","text":"<p>Before installation, ensure you have the following API keys:</p> <ul> <li>OpenAI: For GPT-4 access (recommended for best performance)</li> <li>Anthropic: For Claude access (alternative/backup AI provider)</li> <li>Infura/Alchemy: Web3 provider for Base Sepolia network</li> <li>IPFS Service: Pinata or Infura IPFS for document storage</li> <li>Testnet Funds: Base Sepolia ETH and LINK tokens</li> </ul>"},{"location":"#support-community","title":"Support &amp; Community","text":"<p>Need help? We're here to assist:</p> <ul> <li>Documentation: Comprehensive guides and troubleshooting</li> <li>GitHub Issues: Report bugs and request features</li> <li>Discord Community: Chat with other node operators</li> <li>Email Support: Direct assistance for urgent issues</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to begin? Start with our Quick Start Guide for the fastest path to running your arbiter node, or check the Prerequisites to ensure your system is ready.</p> <p>First Time Setup</p> <p>New to blockchain oracles? We recommend starting with the Overview to understand how Verdikta Arbiter works before diving into installation. </p>"},{"location":"DOCUMENTATION_SETUP/","title":"Verdikta Arbiter Documentation Setup","text":"<p>This document provides an overview of the professional MkDocs documentation setup created for the Verdikta Arbiter Node installer.</p>"},{"location":"DOCUMENTATION_SETUP/#overview","title":"\ud83d\udccb Overview","text":"<p>We have created a comprehensive, professional-grade documentation system using MkDocs with the Material theme. The documentation is designed to help users successfully install and manage their Verdikta Arbiter Nodes.</p>"},{"location":"DOCUMENTATION_SETUP/#documentation-structure","title":"\ud83c\udfd7\ufe0f Documentation Structure","text":""},{"location":"DOCUMENTATION_SETUP/#core-pages-created","title":"Core Pages Created","text":"<ol> <li><code>index.md</code> - Home page with navigation cards and overview</li> <li><code>overview.md</code> - Detailed system architecture and workflow explanation</li> <li><code>prerequisites.md</code> - Comprehensive system requirements and preparation guide</li> <li><code>quick-start.md</code> - Step-by-step automated installation walkthrough</li> <li><code>installation/index.md</code> - Main installation guide hub</li> <li><code>installation/automated.md</code> - Detailed automated installation guide</li> <li><code>management/index.md</code> - Service management overview</li> </ol>"},{"location":"DOCUMENTATION_SETUP/#directory-structure","title":"Directory Structure","text":"<pre><code>installer/docs/\n\u251c\u2500\u2500 mkdocs.yml                 # MkDocs configuration with Material theme\n\u251c\u2500\u2500 requirements.txt           # Python dependencies\n\u251c\u2500\u2500 serve.sh                   # Convenience script for local development\n\u251c\u2500\u2500 README.md                  # Documentation build and deployment guide\n\u251c\u2500\u2500 DOCUMENTATION_SETUP.md     # This overview file\n\u251c\u2500\u2500 index.md                   # Home page\n\u251c\u2500\u2500 overview.md                # System overview\n\u251c\u2500\u2500 prerequisites.md           # Prerequisites guide\n\u251c\u2500\u2500 quick-start.md             # Quick start guide\n\u251c\u2500\u2500 installation/              # Installation guides\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 automated.md\n\u2502   \u251c\u2500\u2500 manual.md\n\u2502   \u251c\u2500\u2500 environment.md\n\u2502   \u2514\u2500\u2500 components/            # Component-specific guides\n\u251c\u2500\u2500 management/                # Service management\n\u251c\u2500\u2500 oracle/                    # Oracle registration\n\u251c\u2500\u2500 maintenance/               # Maintenance guides\n\u251c\u2500\u2500 troubleshooting/           # Troubleshooting\n\u2514\u2500\u2500 reference/                 # Technical reference\n</code></pre>"},{"location":"DOCUMENTATION_SETUP/#key-features-implemented","title":"\u2728 Key Features Implemented","text":""},{"location":"DOCUMENTATION_SETUP/#professional-design","title":"Professional Design","text":"<ul> <li>Material Design Theme: Modern, responsive interface</li> <li>Code Copy Buttons: One-click copying for all code snippets</li> <li>Syntax Highlighting: Proper highlighting for bash, Python, JavaScript, etc.</li> <li>Mermaid Diagrams: Architecture and flow diagrams</li> <li>Responsive Navigation: Tabbed navigation with sections</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#user-experience","title":"User Experience","text":"<ul> <li>Progressive Disclosure: Information organized from simple to complex</li> <li>Clear Visual Hierarchy: Headers, cards, and admonitions for easy scanning</li> <li>Comprehensive Search: Full-text search across all documentation</li> <li>Copy-Friendly Code: All commands are easily copyable</li> <li>Cross-References: Extensive linking between related sections</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#content-quality","title":"Content Quality","text":"<ul> <li>Step-by-Step Guides: Detailed walkthrough for each process</li> <li>Troubleshooting Sections: Common issues and solutions</li> <li>Visual Aids: Diagrams showing system architecture and workflows</li> <li>Complete Examples: Full, runnable code snippets</li> <li>Best Practices: Security recommendations and operational guidance</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#technical-implementation","title":"\ud83d\udee0\ufe0f Technical Implementation","text":""},{"location":"DOCUMENTATION_SETUP/#mkdocs-configuration","title":"MkDocs Configuration","text":"<p>The <code>mkdocs.yml</code> file includes:</p> <ul> <li>Material Theme: Latest version with all modern features enabled</li> <li>Extensions: PyMdown Extensions for enhanced markdown capabilities</li> <li>Search: Advanced search with highlighting and suggestions</li> <li>Navigation: Organized into logical sections with icons</li> <li>Code Features: Copy buttons, line numbers, and syntax highlighting</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#markdown-extensions","title":"Markdown Extensions","text":"<p>Key extensions enabled: - Admonitions: Info, tip, warning, and danger boxes - Code Blocks: Enhanced code highlighting with copy functionality - Tables: Responsive tables for structured data - Mermaid: Diagram support for architecture visualization - Footnotes: Reference links and explanations</p>"},{"location":"DOCUMENTATION_SETUP/#build-system","title":"Build System","text":"<ul> <li>Requirements File: Pinned dependencies for reproducible builds</li> <li>Serve Script: Convenience script for local development</li> <li>GitHub Pages Ready: One-command deployment to GitHub Pages</li> <li>Docker Support: Containerized deployment option</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#content-organization","title":"\ud83d\udcda Content Organization","text":""},{"location":"DOCUMENTATION_SETUP/#getting-started-section","title":"Getting Started Section","text":"<ul> <li>Overview: System architecture and workflow explanation</li> <li>Prerequisites: Comprehensive requirements checklist</li> <li>Quick Start: 30-minute automated installation guide</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#installation-section","title":"Installation Section","text":"<ul> <li>Automated Installation: Recommended path with detailed walkthrough</li> <li>Manual Installation: Step-by-step manual process</li> <li>Component Guides: Individual component installation details</li> <li>Environment Setup: Configuration and API key management</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#management-section","title":"Management Section","text":"<ul> <li>Service Management: Starting, stopping, and monitoring services</li> <li>Status Monitoring: Health checks and performance metrics</li> <li>Log Analysis: Debugging and troubleshooting</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#reference-section","title":"Reference Section","text":"<ul> <li>Script Reference: Complete documentation of all installer scripts</li> <li>Configuration Files: Location and format of all config files</li> <li>API Documentation: External API integrations and usage</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#getting-started-with-documentation","title":"\ud83d\ude80 Getting Started with Documentation","text":""},{"location":"DOCUMENTATION_SETUP/#local-development","title":"Local Development","text":"<ol> <li> <p>Install Dependencies:    <pre><code>cd installer/docs\n./serve.sh install\n</code></pre></p> </li> <li> <p>Serve Locally:    <pre><code>./serve.sh serve\n</code></pre>    Visit http://localhost:8000</p> </li> <li> <p>Build for Production:    <pre><code>./serve.sh build\n</code></pre></p> </li> </ol>"},{"location":"DOCUMENTATION_SETUP/#deployment-options","title":"Deployment Options","text":"<ol> <li>GitHub Pages: <code>./serve.sh deploy</code></li> <li>Manual Deployment: Build and upload <code>site/</code> directory</li> <li>Docker: Containerized deployment with nginx</li> </ol>"},{"location":"DOCUMENTATION_SETUP/#benefits-for-users","title":"\ud83d\udcc8 Benefits for Users","text":""},{"location":"DOCUMENTATION_SETUP/#for-new-users","title":"For New Users","text":"<ul> <li>Clear Learning Path: From prerequisites to running node</li> <li>Visual Guidance: Diagrams and screenshots for complex concepts</li> <li>Safety First: Security warnings and best practices</li> <li>Quick Success: 30-minute quick start path</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#for-advanced-users","title":"For Advanced Users","text":"<ul> <li>Component Details: Deep dive into each system component</li> <li>Manual Control: Step-by-step manual installation option</li> <li>Troubleshooting: Comprehensive problem-solving guides</li> <li>Reference Material: Complete technical documentation</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#for-node-operators","title":"For Node Operators","text":"<ul> <li>Management Guides: Day-to-day operational procedures</li> <li>Monitoring Setup: Health checks and performance tracking</li> <li>Maintenance: Backup, upgrade, and security procedures</li> <li>Emergency Response: Recovery procedures for common issues</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#customization-and-maintenance","title":"\ud83d\udd27 Customization and Maintenance","text":""},{"location":"DOCUMENTATION_SETUP/#adding-new-content","title":"Adding New Content","text":"<ol> <li>Create markdown files in appropriate directories</li> <li>Add to navigation in <code>mkdocs.yml</code></li> <li>Follow established content guidelines</li> <li>Test locally before deployment</li> </ol>"},{"location":"DOCUMENTATION_SETUP/#updating-existing-content","title":"Updating Existing Content","text":"<ol> <li>Edit markdown files directly</li> <li>Ensure all links remain valid</li> <li>Update any affected cross-references</li> <li>Test builds locally</li> </ol>"},{"location":"DOCUMENTATION_SETUP/#style-customization","title":"Style Customization","text":"<ul> <li>Modify theme configuration in <code>mkdocs.yml</code></li> <li>Add custom CSS in <code>stylesheets/</code> directory</li> <li>Adjust color schemes and fonts as needed</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#quality-metrics","title":"\ud83d\udcca Quality Metrics","text":""},{"location":"DOCUMENTATION_SETUP/#documentation-coverage","title":"Documentation Coverage","text":"<ul> <li>\u2705 Complete installation process (9 steps)</li> <li>\u2705 All major components documented</li> <li>\u2705 Troubleshooting for common issues</li> <li>\u2705 Security best practices included</li> <li>\u2705 Management and maintenance procedures</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#user-experience_1","title":"User Experience","text":"<ul> <li>\u2705 Mobile-responsive design</li> <li>\u2705 Fast search functionality</li> <li>\u2705 Accessible navigation</li> <li>\u2705 Copy-friendly code examples</li> <li>\u2705 Visual architecture diagrams</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#technical-quality","title":"Technical Quality","text":"<ul> <li>\u2705 Professional theme implementation</li> <li>\u2705 SEO-optimized structure</li> <li>\u2705 Fast build and deployment</li> <li>\u2705 Version control integration</li> <li>\u2705 Automated dependency management</li> </ul>"},{"location":"DOCUMENTATION_SETUP/#next-steps","title":"\ud83c\udfaf Next Steps","text":""},{"location":"DOCUMENTATION_SETUP/#immediate-tasks","title":"Immediate Tasks","text":"<ol> <li>Content Completion: Finish remaining section pages</li> <li>Review and Testing: Validate all procedures and code examples</li> <li>Asset Addition: Add logos, screenshots, and additional diagrams</li> <li>Cross-Reference Verification: Ensure all internal links work</li> </ol>"},{"location":"DOCUMENTATION_SETUP/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>Interactive Elements: Consider adding interactive tutorials</li> <li>Video Content: Embed walkthrough videos for complex procedures</li> <li>Community Features: Add contribution guidelines and feedback mechanisms</li> <li>Localization: Support for multiple languages</li> <li>Analytics: Track documentation usage and popular sections</li> </ol>"},{"location":"DOCUMENTATION_SETUP/#conclusion","title":"\ud83c\udfc6 Conclusion","text":"<p>This documentation system provides a professional, comprehensive resource for Verdikta Arbiter Node operators. It combines modern web technologies with clear, actionable content to ensure users can successfully deploy and manage their nodes.</p> <p>The documentation is designed to grow with the project, making it easy to add new features, update procedures, and maintain high-quality user experience as the Verdikta ecosystem evolves.</p>"},{"location":"DOCUMENTATION_SETUP/#key-achievements","title":"Key Achievements","text":"<ul> <li>\u2705 Professional-grade documentation site</li> <li>\u2705 Complete installation workflow documented</li> <li>\u2705 Modern, responsive design</li> <li>\u2705 Copy-friendly code examples</li> <li>\u2705 Comprehensive troubleshooting guides</li> <li>\u2705 Easy maintenance and updates</li> <li>\u2705 Multiple deployment options</li> </ul> <p>This foundation will help accelerate user adoption and reduce support burden by providing clear, comprehensive guidance for all aspects of Verdikta Arbiter Node deployment and management. </p>"},{"location":"automated-contract-deployment/","title":"Automated Operator Contract Deployment","text":"<p>This document provides instructions for testing the automated deployment of the Operator contract using Truffle instead of the manual deployment via Remix.</p>"},{"location":"automated-contract-deployment/#overview","title":"Overview","text":"<p>The new <code>deploy-contracts-automated.sh</code> script automates the following tasks:</p> <ol> <li>Sets up a Truffle project for the Operator contract</li> <li>Deploys the Operator contract to Base Sepolia testnet</li> <li>Extracts the deployed contract address</li> <li>Authorizes the Chainlink node to use the Operator contract</li> <li>Generates a temporary job ID placeholder (will be replaced by the actual Chainlink-assigned job ID)</li> </ol>"},{"location":"automated-contract-deployment/#prerequisites","title":"Prerequisites","text":"<p>Before running the script, make sure you have:</p> <ol> <li>A wallet with Base Sepolia ETH for deployment (get from Base Sepolia Faucet)</li> <li>The Chainlink node running (the script will ask for the node's ETH address)</li> <li>Node.js and npm installed</li> <li>Infura API key configured in <code>.api_keys</code></li> </ol>"},{"location":"automated-contract-deployment/#testing-instructions","title":"Testing Instructions","text":"<p>Follow these steps to test the automated deployment independently:</p>"},{"location":"automated-contract-deployment/#step-1-ensure-your-environment-is-set-up","title":"Step 1: Ensure your environment is set up","text":"<p>Make sure you have run at least these scripts: <pre><code>./installer/bin/setup-environment.sh\n./installer/bin/setup-docker.sh\n./installer/bin/setup-chainlink.sh\n</code></pre></p>"},{"location":"automated-contract-deployment/#step-2-run-the-automated-deployment-script","title":"Step 2: Run the automated deployment script","text":"<pre><code>./installer/bin/deploy-contracts-automated.sh\n</code></pre>"},{"location":"automated-contract-deployment/#step-3-follow-the-script-prompts","title":"Step 3: Follow the script prompts","text":"<ol> <li>Enter your private key when requested (without the 0x prefix)</li> <li>Confirm deployment to Base Sepolia testnet</li> <li>Wait for deployment to complete</li> <li>When prompted, get your Chainlink node address from the UI at http://localhost:6688</li> <li>The script will automatically authorize your node</li> </ol>"},{"location":"automated-contract-deployment/#step-4-verify-the-deployment-results","title":"Step 4: Verify the deployment results","text":"<p>Check the following files to verify the success: - <code>$INSTALLER_DIR/.contracts</code> - Should contain OPERATOR_ADDRESS, NODE_ADDRESS - <code>$INSTALL_DIR/contracts/operator-contract/build/contracts/MyOperator.json</code> - Deployment artifacts - <code>$INSTALL_DIR/contracts/info/deployment.txt</code> - Deployment summary</p>"},{"location":"automated-contract-deployment/#step-5-create-the-actual-job-in-chainlink","title":"Step 5: Create the actual job in Chainlink","text":"<p>The script generates a temporary job ID placeholder, but you need to create the actual job in Chainlink:</p> <ol> <li>Run the configure-node.sh script:    <pre><code>./installer/bin/configure-node.sh\n</code></pre></li> <li>Follow the prompts to create a job in the Chainlink UI</li> <li>Enter the actual job ID assigned by Chainlink when prompted</li> </ol> <p>This step is crucial because Chainlink assigns its own job ID when you create a job, and this is the ID you need to use for proper functionality.</p>"},{"location":"automated-contract-deployment/#step-6-test-the-integration-with-client-contract","title":"Step 6: Test the integration with client contract","text":"<p>After you have the actual job ID from Chainlink, run: <pre><code>./installer/bin/setup-client-contract.sh\n</code></pre></p> <p>This will use the Operator contract address and the actual job ID from Chainlink for the client contract setup.</p>"},{"location":"automated-contract-deployment/#important-about-job-ids","title":"Important: About Job IDs","text":"<p>There are two types of job IDs in the workflow:</p> <ol> <li>Temporary Job ID Placeholder: Generated by <code>deploy-contracts-automated.sh</code> and saved to <code>.job_placeholder</code></li> <li>This is only a placeholder and will NOT work for actual Chainlink requests</li> <li> <p>It exists to provide a reference format for what a job ID looks like</p> </li> <li> <p>Actual Job ID: Assigned by Chainlink when you create a job through the UI</p> </li> <li>This is the real job ID that must be used for all operations</li> <li>It's obtained and saved by <code>configure-node.sh</code> to <code>.contracts</code></li> <li>The client contract setup will use this actual job ID</li> </ol> <p>Always make sure to run <code>configure-node.sh</code> to get the actual job ID before proceeding to client contract setup.</p>"},{"location":"automated-contract-deployment/#handling-rate-limiting-issues","title":"Handling Rate Limiting Issues","text":"<p>The deployment script now includes robust handling for RPC rate limiting issues:</p>"},{"location":"automated-contract-deployment/#rate-limiting-problems","title":"Rate Limiting Problems","text":"<p>When deploying contracts to Base Sepolia, you might encounter \"Too Many Requests\" errors like: <pre><code>Error: PollingBlockTracker - encountered an error while attempting to update latest block:\nundefined\n...\ncode: -32603,\nmessage: 'Too Many Requests',\ndata: { originalError: {} }\n</code></pre></p> <p>This happens because Infura and other RPC providers have limits on the number of requests you can make in a short period.</p>"},{"location":"automated-contract-deployment/#how-the-script-handles-rate-limiting","title":"How the Script Handles Rate Limiting","text":"<p>The deployment script now includes these features to handle rate limiting:</p> <ol> <li>Multiple RPC Endpoints: Uses fallback RPC providers if Infura has rate limiting issues</li> <li>Reduced Polling Frequency: Decreases how often Truffle checks for transaction confirmations</li> <li>Retry Logic with Backoff: Automatically retries failed deployment with increasing wait times</li> <li>Connectivity Testing: Tests RPC endpoints before deployment to find working providers</li> <li>Extended Timeouts: Increases network timeouts to allow for slower responses</li> </ol>"},{"location":"automated-contract-deployment/#if-you-still-encounter-rate-limiting","title":"If You Still Encounter Rate Limiting","text":"<p>If you still encounter rate limiting issues:</p> <ol> <li>Wait 10-15 minutes before trying again (this allows rate limits to reset)</li> <li>Try using a different Infura API key if available</li> <li>Consider upgrading to a paid Infura plan for higher rate limits</li> <li>Run the deployment during off-peak hours when fewer users are making requests</li> </ol>"},{"location":"automated-contract-deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"automated-contract-deployment/#if-deployment-fails","title":"If deployment fails:","text":"<ol> <li>Check that your wallet has sufficient Base Sepolia ETH</li> <li>Verify your Infura API key is valid</li> <li>You may need to adjust gas settings in the <code>truffle-config.js</code></li> </ol>"},{"location":"automated-contract-deployment/#if-node-authorization-fails","title":"If node authorization fails:","text":"<ol> <li>Make sure the Chainlink node is running</li> <li>Verify the node address is correct</li> <li>Check that the deployer wallet has enough Base Sepolia ETH for the authorization transaction</li> </ol>"},{"location":"automated-contract-deployment/#common-errors-and-solutions","title":"Common errors and solutions:","text":""},{"location":"automated-contract-deployment/#import-path-errors","title":"Import path errors","text":"<p>If you see errors like: <pre><code>ParserError: Source \"https://raw.githubusercontent.com/smartcontractkit/chainlink/master/contracts/src/v0.8/operatorforwarder/Operator.sol\" not found\n</code></pre> or <pre><code>ParserError: Source \"@chainlink/contracts/src/v0.8/operatorforwarder/Operator.sol\" not found\n</code></pre></p> <p>The script has multiple failover mechanisms to handle these import issues:</p> <ol> <li>Automatic path detection: The script searches for the correct import path in the Chainlink package</li> <li>Different package version: If the first attempt fails, it will try with a different version of <code>@chainlink/contracts</code></li> <li>Local interfaces: As a final fallback, the script creates local interface files and implements a simplified Operator contract that doesn't depend on external imports</li> </ol> <p>These mechanisms ensure that the contract will compile and deploy successfully regardless of package structure variations.</p>"},{"location":"automated-contract-deployment/#integration-with-the-main-installation-process","title":"Integration with the main installation process","text":"<p>Once testing is successful, the <code>deploy-contracts-automated.sh</code> script can replace the manual <code>deploy-contracts.sh</code> in the main installation flow by updating the <code>install.sh</code> script. This has already been implemented, allowing users to choose between manual and automated deployment.</p>"},{"location":"automated-contract-deployment/#comparison-with-manual-deployment","title":"Comparison with manual deployment","text":"Aspect Manual Deployment Automated Deployment User Interaction Requires Remix IDE Command line only Steps Multiple manual steps Single script execution Error Handling Manual recovery Built-in error detection Transaction Visibility Visible in Remix UI Logs in terminal Time Required 15-20 minutes 5-10 minutes Robustness Depends on user Multiple failover mechanisms"},{"location":"overview/","title":"Overview","text":"<p>The Verdikta Arbiter Node is a sophisticated oracle system that brings AI-powered dispute resolution to blockchain networks. This overview explains how the system works, its components, and the flow of arbitration requests.</p>"},{"location":"overview/#how-verdikta-arbiter-works","title":"How Verdikta Arbiter Works","text":"<p>Verdikta Arbiter combines cutting-edge AI technology with proven Chainlink oracle infrastructure to provide automated, intelligent dispute resolution services for smart contracts and decentralized applications.</p> <pre><code>sequenceDiagram\n    participant Client as Smart Contract\n    participant CL as Chainlink Node\n    participant EA as External Adapter\n    participant AI as AI Node\n    participant LLM as Language Models\n    participant IPFS as IPFS Storage\n\n    Client-&gt;&gt;CL: Request arbitration\n    CL-&gt;&gt;EA: Forward request via bridge\n    EA-&gt;&gt;AI: Process arbitration request\n    AI-&gt;&gt;IPFS: Retrieve evidence documents\n    IPFS--&gt;&gt;AI: Return documents\n    AI-&gt;&gt;LLM: Analyze case with context\n    LLM--&gt;&gt;AI: Return decision + reasoning\n    AI-&gt;&gt;IPFS: Store decision record\n    AI--&gt;&gt;EA: Return decision\n    EA--&gt;&gt;CL: Return structured response\n    CL--&gt;&gt;Client: Submit decision on-chain</code></pre>"},{"location":"overview/#core-components","title":"Core Components","text":""},{"location":"overview/#chainlink-node","title":"Chainlink Node","text":"<p>The Chainlink Node serves as the oracle infrastructure backbone:</p> <ul> <li>Oracle Network Integration: Connects to blockchain networks (currently Base Sepolia)</li> <li>Job Management: Executes predefined job specifications for arbitration requests</li> <li>Data Security: Handles cryptographic signing and secure data transmission</li> <li>Reputation Tracking: Maintains oracle performance metrics and reliability scores</li> </ul>"},{"location":"overview/#external-adapter","title":"External Adapter","text":"<p>The External Adapter acts as a bridge between the blockchain and AI systems:</p> <ul> <li>Request Translation: Converts blockchain requests into AI-processable formats</li> <li>Data Validation: Ensures request integrity and parameter validation</li> <li>Response Formatting: Structures AI decisions for blockchain consumption</li> <li>Error Handling: Manages failures and provides fallback mechanisms</li> </ul>"},{"location":"overview/#ai-node","title":"AI Node","text":"<p>The AI Node is the core intelligence system:</p> <ul> <li>Multi-Model Support: Integrates OpenAI GPT-4 and Anthropic Claude models</li> <li>Evidence Processing: Retrieves and analyzes documents from IPFS</li> <li>Decision Generation: Produces structured arbitration decisions with reasoning</li> <li>Context Management: Maintains conversation history and case context</li> </ul>"},{"location":"overview/#smart-contracts","title":"Smart Contracts","text":"<p>The on-chain components handle request lifecycle:</p> <ul> <li>Operator Contract: Manages oracle authorization and payment</li> <li>Aggregator Contract: Coordinates multiple oracles for consensus</li> <li>Reputation System: Tracks oracle performance and handles disputes</li> </ul>"},{"location":"overview/#request-flow","title":"Request Flow","text":""},{"location":"overview/#1-request-initiation","title":"1. Request Initiation","text":"<p>A smart contract initiates an arbitration request by calling the Chainlink Oracle:</p> <pre><code>function requestArbitration(\n    string memory caseDescription,\n    string[] memory evidenceIPFSHashes,\n    uint256 payment\n) external {\n    Chainlink.Request memory req = buildChainlinkRequest(\n        jobId,\n        address(this),\n        this.fulfill.selector\n    );\n    req.add(\"caseDescription\", caseDescription);\n    req.addStringArray(\"evidence\", evidenceIPFSHashes);\n    sendChainlinkRequest(req, payment);\n}\n</code></pre>"},{"location":"overview/#2-oracle-processing","title":"2. Oracle Processing","text":"<p>The Chainlink Node receives the request and triggers the job specification:</p> <pre><code>type = \"directrequest\"\nschemaVersion = 1\nname = \"Verdikta Arbitration Job\"\ncontractAddress = \"OPERATOR_CONTRACT_ADDRESS\"\nmaxTaskDuration = \"5m\"\nobservationSource = \"\"\"\n    decode_log   [type=\"ethabidecodelog\"]\n    decode_cbor  [type=\"cborparse\"]\n    fetch        [type=\"bridge\" name=\"verdikta-adapter\"]\n    encode_data  [type=\"ethabiencode\"]\n    encode_tx    [type=\"ethabiencodetx\"]\n    submit_tx    [type=\"ethabsubmittx\"]\n\"\"\"\n</code></pre>"},{"location":"overview/#3-ai-processing","title":"3. AI Processing","text":"<p>The AI Node processes the request through several stages:</p>"},{"location":"overview/#evidence-retrieval","title":"Evidence Retrieval","text":"<pre><code>// Fetch evidence documents from IPFS\nconst evidenceDocuments = await Promise.all(\n    evidenceHashes.map(hash =&gt; ipfs.cat(hash))\n);\n</code></pre>"},{"location":"overview/#ai-analysis","title":"AI Analysis","text":"<pre><code>// Analyze case with multiple AI models\nconst decisions = await Promise.all([\n    analyzeWithGPT4(caseDescription, evidence),\n    analyzeWithClaude(caseDescription, evidence)\n]);\n\n// Consensus or confidence-based selection\nconst finalDecision = selectBestDecision(decisions);\n</code></pre>"},{"location":"overview/#response-generation","title":"Response Generation","text":"<pre><code>// Structure response for blockchain\nconst response = {\n    decision: finalDecision.ruling,\n    confidence: finalDecision.confidence,\n    reasoning: finalDecision.explanation,\n    evidenceReview: finalDecision.evidenceAnalysis\n};\n</code></pre>"},{"location":"overview/#4-response-delivery","title":"4. Response Delivery","text":"<p>The decision is returned to the requesting smart contract:</p> <pre><code>function fulfill(\n    bytes32 requestId,\n    uint256 decision,\n    uint256 confidence,\n    string memory reasoning\n) external recordChainlinkFulfillment(requestId) {\n    // Process arbitration result\n    emit ArbitrationComplete(requestId, decision, confidence);\n}\n</code></pre>"},{"location":"overview/#architecture-benefits","title":"Architecture Benefits","text":""},{"location":"overview/#decentralization","title":"Decentralization","text":"<ul> <li>Multiple Oracles: Supports multiple arbiter nodes for consensus</li> <li>No Single Point of Failure: Distributed architecture ensures reliability</li> <li>Transparent Operations: All decisions and reasoning are recorded on-chain</li> </ul>"},{"location":"overview/#ai-powered-intelligence","title":"AI-Powered Intelligence","text":"<ul> <li>Advanced Language Models: Leverages state-of-the-art AI for nuanced decisions</li> <li>Multi-Model Consensus: Uses multiple AI providers for robust analysis</li> <li>Continuous Learning: System improves through experience and feedback</li> </ul>"},{"location":"overview/#blockchain-integration","title":"Blockchain Integration","text":"<ul> <li>Native Compatibility: Built specifically for blockchain dispute resolution</li> <li>Cryptographic Security: All communications are cryptographically secured</li> <li>Payment Automation: Automated oracle payments and fee distribution</li> </ul>"},{"location":"overview/#transparency-auditability","title":"Transparency &amp; Auditability","text":"<ul> <li>Decision Reasoning: Every decision includes detailed explanation</li> <li>Evidence Trail: Complete audit trail of evidence and analysis</li> <li>Performance Metrics: Oracle performance is tracked and public</li> </ul>"},{"location":"overview/#use-cases","title":"Use Cases","text":""},{"location":"overview/#smart-contract-disputes","title":"Smart Contract Disputes","text":"<ul> <li>DeFi Protocol Disputes: Resolve complex financial disagreements</li> <li>Insurance Claims: Automated claim processing and validation</li> <li>Escrow Services: Fair resolution of escrow disputes</li> </ul>"},{"location":"overview/#dao-governance","title":"DAO Governance","text":"<ul> <li>Proposal Evaluation: AI-assisted governance proposal analysis</li> <li>Conflict Resolution: Resolve internal DAO disputes</li> <li>Resource Allocation: Fair distribution decisions</li> </ul>"},{"location":"overview/#nft-and-digital-assets","title":"NFT and Digital Assets","text":"<ul> <li>Authenticity Disputes: Verify NFT originality and ownership</li> <li>Royalty Conflicts: Resolve creator compensation disputes</li> <li>Platform Violations: Content moderation and policy enforcement</li> </ul>"},{"location":"overview/#security-considerations","title":"Security Considerations","text":""},{"location":"overview/#data-privacy","title":"Data Privacy","text":"<ul> <li>Encrypted Communications: All data transmission is encrypted</li> <li>Selective Disclosure: Only necessary data is shared with AI models</li> <li>IPFS Integration: Decentralized storage for evidence documents</li> </ul>"},{"location":"overview/#oracle-security","title":"Oracle Security","text":"<ul> <li>Multi-Signature Validation: Critical operations require multiple signatures</li> <li>Rate Limiting: Protection against spam and abuse</li> <li>Slashing Conditions: Penalties for malicious behavior</li> </ul>"},{"location":"overview/#ai-model-security","title":"AI Model Security","text":"<ul> <li>Input Sanitization: All inputs are validated and sanitized</li> <li>Output Validation: AI responses are checked for consistency</li> <li>Fallback Mechanisms: Backup systems for AI model failures</li> </ul>"},{"location":"overview/#performance-metrics","title":"Performance Metrics","text":""},{"location":"overview/#response-times","title":"Response Times","text":"<ul> <li>Evidence Retrieval: &lt; 30 seconds</li> <li>AI Analysis: 1-3 minutes depending on complexity</li> <li>Total Processing: &lt; 5 minutes for standard cases</li> </ul>"},{"location":"overview/#accuracy-targets","title":"Accuracy Targets","text":"<ul> <li>Decision Accuracy: &gt; 90% based on expert review</li> <li>Consistency: &gt; 95% agreement between multiple AI models</li> <li>Appeal Rate: &lt; 5% of decisions are appealed</li> </ul>"},{"location":"overview/#scalability","title":"Scalability","text":"<ul> <li>Concurrent Requests: Supports 10+ simultaneous arbitrations</li> <li>Daily Capacity: 100+ arbitration requests per day</li> <li>Network Growth: Scales horizontally with additional nodes</li> </ul>"},{"location":"overview/#economic-model","title":"Economic Model","text":""},{"location":"overview/#oracle-payments","title":"Oracle Payments","text":"<ul> <li>Request Fees: Paid in LINK tokens for each arbitration</li> <li>Performance Bonuses: Higher accuracy earns increased rewards</li> <li>Reputation Stakes: Oracles stake tokens for participation rights</li> </ul>"},{"location":"overview/#cost-structure","title":"Cost Structure","text":"<ul> <li>AI Model Costs: Pay-per-use pricing for GPT-4 and Claude</li> <li>IPFS Storage: Minimal costs for document storage</li> <li>Infrastructure: Hosting and maintenance expenses</li> </ul>"},{"location":"overview/#future-roadmap","title":"Future Roadmap","text":""},{"location":"overview/#network-expansion","title":"Network Expansion","text":"<ul> <li>Multi-Chain Support: Ethereum, Polygon, Arbitrum integration</li> <li>Cross-Chain Arbitration: Disputes spanning multiple networks</li> <li>Enterprise Integration: Private network deployment options</li> </ul>"},{"location":"overview/#ai-enhancement","title":"AI Enhancement","text":"<ul> <li>Specialized Models: Domain-specific AI training</li> <li>Human-in-the-Loop: Expert review for complex cases</li> <li>Continuous Learning: Model improvement through case history</li> </ul>"},{"location":"overview/#governance-evolution","title":"Governance Evolution","text":"<ul> <li>Decentralized Governance: Community-driven protocol upgrades</li> <li>Oracle DAO: Node operator governance participation</li> <li>Reputation Staking: Enhanced economic security mechanisms</li> </ul>"},{"location":"overview/#next-steps","title":"Next Steps","text":"<p>Ready to deploy your own arbiter node? Choose your path:</p> <ol> <li>Quick Setup: Follow the Quick Start Guide for automated installation</li> <li>Detailed Installation: Use the Installation Guide for step-by-step setup</li> <li>Prerequisites: Review system requirements first</li> </ol> <p>Understanding the System</p> <p>This overview provides a high-level understanding of Verdikta Arbiter. For technical details about specific components, refer to the Installation Guide and Reference Documentation. </p>"},{"location":"prerequisites/","title":"Prerequisites","text":"<p>Before installing your Verdikta Arbiter Node, ensure your system meets all requirements and you have the necessary API keys and resources.</p>"},{"location":"prerequisites/#system-requirements","title":"System Requirements","text":""},{"location":"prerequisites/#operating-system","title":"Operating System","text":"<p>The Verdikta Arbiter Node supports the following operating systems:</p> UbuntumacOSWindows <ul> <li>Minimum: Ubuntu 20.04 LTS</li> <li>Recommended: Ubuntu 22.04 LTS or newer</li> <li>Architecture: x86_64 (AMD64)</li> </ul> <ul> <li>Minimum: macOS 11.0 (Big Sur)</li> <li>Recommended: macOS 12.0 (Monterey) or newer</li> <li>Architecture: Intel x86_64 or Apple Silicon (M1/M2)</li> </ul> <ul> <li>Requirement: Windows Subsystem for Linux 2 (WSL2)</li> <li>WSL Distribution: Ubuntu 20.04 or 22.04</li> <li>Windows Version: Windows 10 version 2004 or Windows 11</li> </ul>"},{"location":"prerequisites/#hardware-requirements","title":"Hardware Requirements","text":"Component Minimum Recommended Notes CPU 2 cores 4+ cores Multi-core improves AI processing performance RAM 6 GB 8+ GB Additional RAM helps with concurrent request processing Storage 100 GB 200+ GB SSD recommended for better database performance Network Stable internet High-speed broadband Required for blockchain and IPFS operations"},{"location":"prerequisites/#software-dependencies","title":"Software Dependencies","text":"<p>The following software will be automatically installed if not present:</p> <ul> <li>Git (required for repository cloning)</li> <li>Node.js 18.17.0+ (for External Adapter and AI Node)</li> <li>Docker 24.0.0+ (for Chainlink Node and PostgreSQL)</li> <li>Docker Compose 2.20.0+ (for container orchestration)</li> <li>jq (for JSON processing in scripts)</li> </ul>"},{"location":"prerequisites/#api-keys-and-services","title":"API Keys and Services","text":""},{"location":"prerequisites/#required-api-keys","title":"Required API Keys","text":"<p>You'll need API keys from the following services:</p>"},{"location":"prerequisites/#openai","title":"OpenAI","text":"<ul> <li>Purpose: GPT-4 access for AI-powered adjudication</li> <li>Plans: Pay-per-use or subscription plans with GPT-4 access</li> <li>Sign up: OpenAI Platform</li> </ul> <p>GPT-4 Access</p> <p>Ensure your OpenAI account has GPT-4 API access. This may require a paid plan or API credits.</p>"},{"location":"prerequisites/#anthropic","title":"Anthropic","text":"<ul> <li>Purpose: Claude access as backup/alternative AI provider</li> <li>Plans: Pay-per-use API access</li> <li>Sign up: Anthropic Console</li> </ul>"},{"location":"prerequisites/#web3-provider","title":"Web3 Provider","text":"<p>Choose one of the following providers for Base Sepolia network access:</p> InfuraAlchemyQuickNode <ul> <li>Service: Base Sepolia RPC endpoint</li> <li>Sign up: Infura</li> <li>Free tier: Available with rate limits</li> </ul> <ul> <li>Service: Base Sepolia RPC endpoint  </li> <li>Sign up: Alchemy</li> <li>Free tier: Available with generous limits</li> </ul> <ul> <li>Service: Base Sepolia RPC endpoint</li> <li>Sign up: QuickNode</li> <li>Free tier: Limited endpoints available</li> </ul>"},{"location":"prerequisites/#ipfs-service","title":"IPFS Service","text":"<p>For document storage and retrieval:</p> PinataInfura IPFS <ul> <li>Service: IPFS pinning and gateway</li> <li>Sign up: Pinata</li> <li>Free tier: 1GB storage limit</li> <li>Recommended: Paid plans for production use</li> </ul> <ul> <li>Service: IPFS API and gateway</li> <li>Sign up: Infura</li> <li>Free tier: Available with rate limits</li> </ul>"},{"location":"prerequisites/#testnet-funds","title":"Testnet Funds","text":"<p>You'll need testnet tokens for contract deployment and operations:</p>"},{"location":"prerequisites/#base-sepolia-eth","title":"Base Sepolia ETH","text":"<ul> <li>Purpose: Gas fees for contract deployment and transactions</li> <li>Amount needed: ~0.1 ETH (covers deployment and initial operations)</li> <li>Faucets:</li> <li>Base Sepolia Faucet</li> <li>Alchemy Faucet</li> </ul>"},{"location":"prerequisites/#base-sepolia-link","title":"Base Sepolia LINK","text":"<ul> <li>Purpose: Oracle payment token</li> <li>Amount needed: ~10 LINK tokens</li> <li>Faucet: Chainlink Faucet</li> </ul> <p>Testnet Only</p> <p>These are testnet tokens with no real value. Never use mainnet funds during testing.</p>"},{"location":"prerequisites/#pre-installation-checklist","title":"Pre-Installation Checklist","text":"<p>Before starting the installation, verify you have:</p>"},{"location":"prerequisites/#system-preparation","title":"System Preparation","text":"<ul> <li> Supported operating system (Ubuntu 20.04+, macOS 11+, or WSL2)</li> <li> Minimum 6GB RAM and 100GB storage available</li> <li> Stable internet connection</li> <li> Administrative/sudo access for software installation</li> </ul>"},{"location":"prerequisites/#api-keys-and-credentials","title":"API Keys and Credentials","text":"<ul> <li> OpenAI API key with GPT-4 access</li> <li> Anthropic API key for Claude access</li> <li> Web3 provider API key (Infura/Alchemy/QuickNode)</li> <li> IPFS service credentials (Pinata/Infura IPFS)</li> </ul>"},{"location":"prerequisites/#blockchain-resources","title":"Blockchain Resources","text":"<ul> <li> Wallet private key with testnet funds</li> <li> Base Sepolia ETH (~0.1 ETH minimum)</li> <li> Base Sepolia LINK tokens (~10 LINK minimum)</li> </ul>"},{"location":"prerequisites/#documentation-access","title":"Documentation Access","text":"<ul> <li> Access to this documentation</li> <li> Repository clone or download completed</li> <li> Notepad for recording generated addresses and credentials</li> </ul>"},{"location":"prerequisites/#security-considerations","title":"Security Considerations","text":""},{"location":"prerequisites/#private-key-security","title":"Private Key Security","text":"<p>Critical Security Warning</p> <ul> <li>Never use mainnet private keys or funds</li> <li>Never commit private keys to version control</li> <li>Use dedicated testnet wallets only</li> <li>Store private keys securely and separately from the codebase</li> </ul>"},{"location":"prerequisites/#api-key-management","title":"API Key Management","text":"<ul> <li>Keep API keys secure and never share them</li> <li>Use environment variables for key storage</li> <li>Rotate keys periodically for security</li> <li>Monitor API usage for unexpected activity</li> </ul>"},{"location":"prerequisites/#network-security","title":"Network Security","text":"<ul> <li>Ensure your system is behind a firewall</li> <li>Keep software dependencies updated</li> <li>Use strong passwords for all accounts</li> <li>Enable two-factor authentication where available</li> </ul>"},{"location":"prerequisites/#prerequisites-verification","title":"Prerequisites Verification","text":"<p>The installer includes an automated prerequisites checker. You can run it independently:</p> <pre><code>cd verdikta-arbiter/installer\nbash util/check-prerequisites.sh\n</code></pre>"},{"location":"prerequisites/#sample-output","title":"Sample Output","text":"<pre><code>Checking system prerequisites for Verdikta Arbiter Node...\n\u2713 Ubuntu 22.04 detected.\n\u2713 8 CPU cores detected.\n\u2713 16 GB RAM detected.\n\u2713 250 GB available disk space detected.\n\u2713 Git version 2.34.1 detected.\n\u2713 Node.js version 18.19.0 detected.\n\u2713 Docker version 24.0.7 detected.\n\u2713 Docker daemon is running.\n\u2713 Docker Compose plugin version 2.21.0 detected.\n\u2713 Internet connectivity detected.\n\u2713 jq version 1.6 detected.\n\n=== Prerequisite Check Summary ===\nAll prerequisites met! Your system is ready for Verdikta Arbiter Node installation.\n</code></pre>"},{"location":"prerequisites/#next-steps","title":"Next Steps","text":"<p>Once all prerequisites are met:</p> <ol> <li>Quick Start: Follow the Quick Start Guide for automated installation</li> <li>Detailed Installation: Use the Installation Guide for step-by-step instructions</li> <li>Manual Setup: Advanced users can follow Manual Installation</li> </ol> <p>Ready to Install</p> <p>If all prerequisites are satisfied, you're ready to proceed with installation. Choose your preferred installation method and continue to the next section. </p>"},{"location":"quick-start/","title":"Quick Start","text":"<p>Get your Verdikta Arbiter Node up and running in under 30 minutes with our automated installer. This guide will walk you through the fastest path to a fully operational node.</p> <p>Before You Begin</p> <p>Ensure you've completed the Prerequisites checklist, including gathering all required API keys and testnet funds.</p>"},{"location":"quick-start/#installation-overview","title":"Installation Overview","text":"<p>The automated installation performs these steps:</p> <ol> <li>System Check - Verifies prerequisites and dependencies</li> <li>Environment Setup - Configures API keys and settings</li> <li>Component Installation - Installs AI Node, External Adapter, and dependencies</li> <li>Docker Setup - Configures PostgreSQL and Chainlink Node</li> <li>Contract Deployment - Deploys oracle contracts to Base Sepolia</li> <li>Configuration - Sets up jobs, bridges, and oracle registration</li> <li>Verification - Confirms all services are running correctly</li> </ol>"},{"location":"quick-start/#step-1-clone-repository","title":"Step 1: Clone Repository","text":"<p>First, clone the Verdikta Arbiter repository to your system:</p> <pre><code>git clone https://github.com/verdikta/verdikta-arbiter.git\ncd verdikta-arbiter/installer\n</code></pre>"},{"location":"quick-start/#step-2-run-automated-installer","title":"Step 2: Run Automated Installer","text":"<p>Execute the main installation script:</p> <pre><code>bash bin/install.sh\n</code></pre> <p>The installer will display a welcome banner and begin the process:</p> <pre><code>====================================================\n  Verdikta Arbiter Node Installation\n====================================================\n\n[1/9] Checking prerequisites...\n</code></pre>"},{"location":"quick-start/#step-3-interactive-setup","title":"Step 3: Interactive Setup","text":"<p>The installer will prompt you for configuration details. Have your API keys ready:</p>"},{"location":"quick-start/#environment-configuration","title":"Environment Configuration","text":"<p>You'll be prompted to enter:</p> Installation PathOpenAI ConfigurationAnthropic ConfigurationWeb3 ProviderIPFS ServiceWallet Configuration <pre><code>Enter installation directory [~/verdikta-arbiter-node]: \n</code></pre> <p>Default: <code>~/verdikta-arbiter-node</code> Note: Press Enter to use default or specify custom path</p> <pre><code>Enter your OpenAI API key: sk-...\nSelect OpenAI model:\n1) gpt-4-turbo-preview\n2) gpt-4\n3) gpt-3.5-turbo\nChoose [1-3]: 1\n</code></pre> <pre><code>Enter your Anthropic API key: sk-ant-...\nSelect Claude model:\n1) claude-3-opus-20240229\n2) claude-3-sonnet-20240229\n3) claude-3-haiku-20240307\nChoose [1-3]: 2\n</code></pre> <pre><code>Enter your Infura/Alchemy API key: ...\nEnter Base Sepolia RPC URL [https://base-sepolia.infura.io/v3/YOUR_KEY]: \n</code></pre> <pre><code>Select IPFS provider:\n1) Pinata\n2) Infura IPFS\nChoose [1-2]: 1\n\nEnter Pinata API Key: ...\nEnter Pinata Secret Key: ...\n</code></pre> <pre><code>Enter your wallet private key (for testnet only): 0x...\n</code></pre> <p>Security Reminder</p> <p>Only use testnet private keys. Never enter mainnet credentials.</p>"},{"location":"quick-start/#step-4-monitor-installation-progress","title":"Step 4: Monitor Installation Progress","text":"<p>Watch the installation progress through each component:</p>"},{"location":"quick-start/#component-installation-timeline","title":"Component Installation Timeline","text":"<pre><code>gantt\n    title Installation Timeline\n    dateFormat X\n    axisFormat %M:%S\n\n    section Prerequisites\n    System Check           :0, 1m\n\n    section Environment  \n    API Key Setup         :1m, 2m\n    Environment Files     :2m, 3m\n\n    section Components\n    AI Node Install      :3m, 8m\n    External Adapter     :8m, 12m\n    Docker Setup         :12m, 15m\n    Chainlink Node       :15m, 20m\n\n    section Blockchain\n    Contract Deployment  :20m, 25m\n    Oracle Registration  :25m, 28m\n\n    section Verification\n    Service Check        :28m, 30m</code></pre>"},{"location":"quick-start/#expected-output","title":"Expected Output","text":"<pre><code>[1/9] Checking prerequisites...\n\u2713 Prerequisites check passed.\n\n[2/9] Setting up environment...\n\u2713 Environment setup completed.\n\n[3/9] Installing AI Node...\n\u2713 AI Node installation completed.\n\n[4/9] Installing External Adapter...\n\u2713 External Adapter installation completed.\n\n[5/9] Setting up Docker and PostgreSQL...\n\u2713 Docker and PostgreSQL setup completed.\n\n[6/9] Setting up Chainlink Node...\n\u2713 Chainlink Node setup completed.\n\n[7/9] Deploying Smart Contracts...\n\u2713 Smart Contract deployment completed.\n\n[8/9] Configuring Node Jobs and Bridges...\n\u2713 Node Jobs and Bridges configuration completed.\n\n[9/9] Registering Oracle with Dispatcher (Optional)...\n\u2713 Oracle registration step completed.\n</code></pre>"},{"location":"quick-start/#step-5-installation-completion","title":"Step 5: Installation Completion","text":"<p>Upon successful completion, you'll see:</p> <pre><code>====================================================\n  Verdikta Arbiter Node Installation Complete!\n====================================================\n\nCongratulations! Your Verdikta Arbiter Node has been successfully installed.\n\nAccess your services at:\n  - AI Node:         http://localhost:3000\n  - External Adapter: http://localhost:8080\n  - Chainlink Node:   http://localhost:6688\n</code></pre>"},{"location":"quick-start/#step-6-verify-installation","title":"Step 6: Verify Installation","text":""},{"location":"quick-start/#check-service-status","title":"Check Service Status","text":"<p>Navigate to your installation directory and verify all services are running:</p> <pre><code>cd ~/verdikta-arbiter-node\n./arbiter-status.sh\n</code></pre> <p>Expected output: <pre><code>=== Verdikta Arbiter Node Status ===\n\n[AI Node] Running on port 3000 \u2713\n[External Adapter] Running on port 8080 \u2713\n[Chainlink Node] Running on port 6688 \u2713\n[PostgreSQL] Running on port 5432 \u2713\n\nAll services are running correctly!\n</code></pre></p>"},{"location":"quick-start/#access-chainlink-ui","title":"Access Chainlink UI","text":"<ol> <li>Open your browser to http://localhost:6688</li> <li>Use the credentials from <code>~/verdikta-arbiter-node/chainlink-node/info.txt</code></li> <li>Verify your job is active in the Jobs section</li> </ol>"},{"location":"quick-start/#test-ai-node","title":"Test AI Node","text":"<p>Check if the AI Node is responding:</p> <pre><code>curl http://localhost:3000/health\n</code></pre> <p>Expected response: <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"version\": \"1.0.0\"\n}\n</code></pre></p>"},{"location":"quick-start/#important-information","title":"Important Information","text":"<p>After installation, critical information is stored in these locations:</p>"},{"location":"quick-start/#contract-addresses","title":"Contract Addresses","text":"<p>File: <code>~/verdikta-arbiter-node/installer/.contracts</code></p> <pre><code>OPERATOR_ADDRESS=0x1234...\nNODE_ADDRESS=0x5678...\nLINK_TOKEN_ADDRESS=0x9abc...\nJOB_ID=abcd1234-5678-90ef-ghij-klmnopqrstuv\nAGGREGATOR_ADDRESS=0xdef0...\nCLASSES_ID=128\n</code></pre>"},{"location":"quick-start/#chainlink-credentials","title":"Chainlink Credentials","text":"<p>File: <code>~/verdikta-arbiter-node/chainlink-node/info.txt</code></p> <pre><code>Chainlink Node UI: http://localhost:6688\nEmail: admin@verdikta.local\nPassword: [generated-password]\nKeystore Password: [generated-keystore-password]\n</code></pre> <p>Secure These Files</p> <p>Keep these files secure and backed up. They contain critical information for your node operation.</p>"},{"location":"quick-start/#management-commands","title":"Management Commands","text":"<p>Use these commands to manage your arbiter node:</p>"},{"location":"quick-start/#start-all-services","title":"Start All Services","text":"<pre><code>cd ~/verdikta-arbiter-node\n./start-arbiter.sh\n</code></pre>"},{"location":"quick-start/#stop-all-services","title":"Stop All Services","text":"<pre><code>cd ~/verdikta-arbiter-node\n./stop-arbiter.sh\n</code></pre>"},{"location":"quick-start/#check-status","title":"Check Status","text":"<pre><code>cd ~/verdikta-arbiter-node\n./arbiter-status.sh\n</code></pre>"},{"location":"quick-start/#next-steps","title":"Next Steps","text":"<p>Now that your arbiter node is running:</p> <ol> <li>Explore Management: Learn about service management</li> <li>Monitor Operations: Set up status monitoring</li> <li>Oracle Registration: Complete dispatcher registration</li> <li>Maintenance: Review backup procedures</li> </ol>"},{"location":"quick-start/#troubleshooting-quick-fixes","title":"Troubleshooting Quick Fixes","text":""},{"location":"quick-start/#common-issues","title":"Common Issues","text":"Port Already in UseDocker Not RunningAPI Key IssuesContract Deployment Failed <pre><code># Check what's using the port\nsudo lsof -i :6688\n\n# Stop the process or change port in config\n</code></pre> <pre><code># Start Docker service\nsudo systemctl start docker\n\n# Restart installation\nbash bin/install.sh\n</code></pre> <pre><code># Re-run environment setup\nbash bin/setup-environment.sh\n</code></pre> <pre><code># Check testnet funds\n# Re-run contract deployment\nbash bin/deploy-contracts.sh\n</code></pre> <p>For detailed troubleshooting, see the Troubleshooting Guide.</p>"},{"location":"quick-start/#support","title":"Support","text":"<p>Need help? Get assistance:</p> <ul> <li>Documentation: Browse the full installation guide</li> <li>GitHub Issues: Report problems or ask questions</li> <li>Discord: Join the community for real-time help</li> <li>Email: Contact support for urgent issues</li> </ul> <p>Installation Complete</p> <p>Congratulations! Your Verdikta Arbiter Node is now operational and ready to process arbitration requests. The node will automatically participate in the network's dispute resolution system. </p>"},{"location":"testing-automated-deployment/","title":"Testing the Automated Contract Deployment","text":"<p>This guide provides instructions for testing just the automated contract deployment script without running the full installation process.</p>"},{"location":"testing-automated-deployment/#prerequisites","title":"Prerequisites","text":"<p>Before testing, ensure you have:</p> <ol> <li>Set up your environment with required tools:</li> <li>Node.js and npm </li> <li>Git</li> <li> <p>Bash</p> </li> <li> <p>Have access to:</p> </li> <li>A wallet with Base Sepolia ETH (get from Base Sepolia Faucet)</li> <li>An Infura API key (for Base Sepolia access)</li> </ol>"},{"location":"testing-automated-deployment/#quick-test-setup","title":"Quick Test Setup","text":"<p>To quickly set up a minimal environment for testing the automated deployment script:</p> <ol> <li> <p>Clone the repository (if you haven't already):    <pre><code>git clone https://github.com/your-org/verdikta-validator.git\ncd verdikta-validator\n</code></pre></p> </li> <li> <p>Create a minimal environment setup:    <pre><code>mkdir -p /root/verdikta-validator/contracts\n\n# Create minimal API keys file\necho 'INFURA_API_KEY=\"your-infura-api-key\"' &gt; installer/.api_keys\n\n# Create minimal .env file\necho 'INSTALL_DIR=\"/root/verdikta-validator\"' &gt; installer/.env\n</code></pre></p> </li> <li> <p>Make the script executable:    <pre><code>chmod +x installer/bin/deploy-contracts-automated.sh\n</code></pre></p> </li> </ol>"},{"location":"testing-automated-deployment/#test-execution","title":"Test Execution","text":"<ol> <li> <p>Run the automated deployment script:    <pre><code>./installer/bin/deploy-contracts-automated.sh\n</code></pre></p> </li> <li> <p>Follow the prompts:</p> </li> <li>Enter your private key when requested</li> <li> <p>Confirm deployment when asked</p> </li> <li> <p>Since you're testing without the Chainlink node running, you can:</p> </li> <li>Either set up a Chainlink node first using <code>setup-chainlink.sh</code></li> <li>Or manually enter a valid ETH address at the node address prompt, and note that authorization will fail (which is expected)</li> </ol>"},{"location":"testing-automated-deployment/#verification","title":"Verification","text":"<p>After running the script, check these files:</p> <ul> <li><code>installer/.contracts</code> - Should contain the OPERATOR_ADDRESS</li> <li><code>/root/verdikta-validator/contracts/operator-contract/build/contracts/MyOperator.json</code> - Should contain the deployment artifacts</li> <li><code>/root/verdikta-validator/contracts/info/deployment.txt</code> - Should contain deployment information</li> </ul>"},{"location":"testing-automated-deployment/#expected-results","title":"Expected Results","text":"<ol> <li>The script should:</li> <li>Set up a Truffle project</li> <li>Compile the contract successfully (no URL import errors)</li> <li>Deploy the contract to Base Sepolia</li> <li> <p>Extract the contract address</p> </li> <li> <p>If run without a Chainlink node, the authorization step should fail (which is expected in this isolated test)</p> </li> </ol>"},{"location":"testing-automated-deployment/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If the script fails to compile, check the import statements in the contract</li> <li>If deployment fails, ensure you have enough Base Sepolia ETH</li> <li>If the script can't find required files, check your directory structure</li> </ul>"},{"location":"testing-automated-deployment/#cleanup","title":"Cleanup","text":"<p>To clean up your test: <pre><code>rm -rf /root/verdikta-validator/contracts/operator-contract\n</code></pre></p>"},{"location":"testing-automated-deployment/#next-steps","title":"Next Steps","text":"<p>After successful testing, you can: 1. Integrate this script into the full installation flow 2. Update documentation to reflect the new automated deployment option 3. Add this as an option in the main installer script </p>"},{"location":"upgrading/","title":"Upgrading the Verdikta Arbiter Node","text":"<p>This document explains how to use the <code>upgrade-arbiter.sh</code> script to upgrade an existing Verdikta Arbiter installation with the latest code.</p>"},{"location":"upgrading/#overview","title":"Overview","text":"<p>The upgrade process: 1. Checks for changes between your installed Arbiter and the current repository 2. Creates a backup of your current installation 3. Stops the Arbiter if it's running 4. Updates components while preserving your configuration 5. Restarts the Arbiter if it was running before the upgrade</p>"},{"location":"upgrading/#prerequisites","title":"Prerequisites","text":"<ul> <li>An existing Verdikta Arbiter installation</li> <li>The latest version of the <code>verdikta-arbiter</code> repository</li> <li>Sufficient disk space for a backup of your current installation</li> </ul>"},{"location":"upgrading/#upgrade-steps","title":"Upgrade Steps","text":"<ol> <li> <p>Clone or update the Verdikta Arbiter repository:    <pre><code># If you don't have the repository yet\ngit clone https://github.com/verdikta/verdikta-arbiter.git\ncd verdikta-arbiter\n\n# If you already have the repository\ncd verdikta-arbiter\ngit pull\n</code></pre></p> </li> <li> <p>Run the upgrade script:    <pre><code>cd installer\nbash bin/upgrade-arbiter.sh\n</code></pre></p> </li> <li> <p>When prompted, enter the path to your existing Arbiter installation:    <pre><code>Enter the target installation directory [/root/verdikta-arbiter-node]:\n</code></pre>    The default will be the same directory used during initial installation.</p> </li> <li> <p>The script will check for changes in each component:    <pre><code>Checking for changes in AI Node...\nFound 12 changes in AI Node:\n- 12 new or modified files\n- 0 files to be removed\n\nChecking for changes in External Adapter...\nFound 3 changes in External Adapter:\n- 3 new or modified files\n- 0 files to be removed\n\n...\n</code></pre></p> </li> <li> <p>If changes are detected, you'll be asked to confirm the upgrade:    <pre><code>Changes were detected in the following components:\n- AI Node\n- External Adapter\n- Management Scripts\n\nDo you want to proceed with the upgrade? (y/n):\n</code></pre></p> </li> <li> <p>If your Arbiter is currently running, the script will inform you and ask for confirmation before stopping it:    <pre><code>Arbiter is currently running and will be stopped for the upgrade.\nDo you want to continue? (y/n):\n</code></pre></p> </li> <li> <p>The script will create a backup before making any changes:    <pre><code>Creating backup of current installation...\nBackup created at: /root/verdikta-arbiter-node_backup_20230815-123045\n</code></pre></p> </li> <li> <p>The script will then upgrade each component that has changes:    <pre><code>Starting upgrade process...\nUpgrading AI Node...\nSuccessfully upgraded AI Node.\n\nUpgrading External Adapter...\nSuccessfully upgraded External Adapter.\n\nUpgrading management scripts...\nUpdated start-arbiter.sh\nUpdated stop-arbiter.sh\nUpdated arbiter-status.sh\n\nUpgrade completed successfully!\n</code></pre></p> </li> <li> <p>If your Arbiter was running, you'll be asked if you want to restart it:    <pre><code>Do you want to restart the arbiter now? (y/n):\n</code></pre></p> </li> </ol>"},{"location":"upgrading/#what-gets-preserved-during-upgrade","title":"What Gets Preserved During Upgrade","text":"<p>The upgrade process preserves:</p> <ul> <li>AI Node: </li> <li><code>.env.local</code> file with API keys</li> <li>Log files</li> <li> <p>Node modules</p> </li> <li> <p>External Adapter:</p> </li> <li><code>.env</code> file with configuration settings</li> <li>Log files</li> <li> <p>Node modules</p> </li> <li> <p>Chainlink Node:</p> </li> <li>Configuration files (<code>.toml</code> files)</li> <li>Log files</li> <li>Database data</li> <li> <p><code>.api</code> file with login credentials</p> </li> <li> <p>Contract Information:</p> </li> <li><code>.contracts</code> file with deployment addresses and configuration</li> </ul>"},{"location":"upgrading/#important-configuration-files-and-their-locations","title":"Important Configuration Files and Their Locations","text":"<p>After installation or upgrade, important configuration and data files are stored in these locations:</p>"},{"location":"upgrading/#contract-information","title":"Contract Information","text":"<ul> <li>Path: <code>~/verdikta-arbiter-node/installer/.contracts</code></li> <li>Contains: </li> <li>Operator contract address</li> <li>Node address</li> <li>LINK token address</li> <li>Job ID (with and without hyphens)</li> <li>Aggregator address</li> <li>Classes ID (when registered with an aggregator)</li> </ul>"},{"location":"upgrading/#chainlink-node-credentials","title":"Chainlink Node Credentials","text":"<ul> <li>Path: <code>~/verdikta-arbiter-node/chainlink-node/info.txt</code></li> <li>Contains: </li> <li>UI login email</li> <li>UI login password</li> <li>Keystore password</li> <li>Configuration directory location</li> </ul>"},{"location":"upgrading/#environment-variables","title":"Environment Variables","text":"<ul> <li>AI Node: <code>~/verdikta-arbiter-node/ai-node/.env.local</code></li> <li>External Adapter: <code>~/verdikta-arbiter-node/external-adapter/.env</code></li> <li>Chainlink Node: <code>~/.chainlink-sepolia/.api</code> (for UI credentials)</li> </ul>"},{"location":"upgrading/#querying-oracle-contract-information","title":"Querying Oracle Contract Information","text":"<p>The installer includes a script to query information about registered oracles:</p>"},{"location":"upgrading/#using-query-oracle-classesjs","title":"Using query-oracle-classes.js","text":"<p>This script allows you to verify if your oracle is registered with an aggregator and check its class ID:</p> <ol> <li> <p>Navigate to the arbiter-operator directory:    <pre><code>cd ~/verdikta-arbiter/arbiter-operator\n</code></pre></p> </li> <li> <p>Run the query script with your contract addresses:    <pre><code>HARDHAT_NETWORK=base_sepolia node scripts/query-oracle-classes.js \\\n  --aggregator YOUR_AGGREGATOR_ADDRESS \\\n  --oracle YOUR_OPERATOR_ADDRESS \\\n  --jobid YOUR_JOB_ID_WITHOUT_HYPHENS\n</code></pre></p> </li> <li> <p>You can get these values from your <code>.contracts</code> file:    <pre><code>cat ~/verdikta-arbiter-node/installer/.contracts\n</code></pre></p> </li> <li> <p>Example output:    <pre><code>ReputationKeeper: 0x6def65a003F9d9d80Cb9f6216dBF0282c8563a27\n\nQuerying information for Oracle: 0x91A5fe7FC3A729BD38602d4bD5a7F9b6aCA6C7A9\nJobID: 517f743acd75461c840ea0a93164285c \u2192 0x3531376637343361636437353436316338343065613061393331363432383563\n\nOracle Status:\n  Active: true\n  Reputation: 0\n  Min Reputation: 0\n  Fee: 0.0 LINK\n  Staked Amount: 0.0 wVDKA\n\nRegistered Class ID: 128\n</code></pre></p> </li> </ol> <p>This information is useful for verifying your oracle's registration status and configuration when integrating with client applications.</p>"},{"location":"upgrading/#troubleshooting","title":"Troubleshooting","text":""},{"location":"upgrading/#the-upgrade-failed-or-caused-issues","title":"The upgrade failed or caused issues","text":"<p>If you encounter problems after upgrading, you can restore from the backup:</p> <pre><code># Stop the arbiter if it's running\ncd /path/to/verdikta-arbiter-node\n./stop-arbiter.sh\n\n# Remove or rename the problematic directory\nmv /path/to/verdikta-arbiter-node /path/to/verdikta-arbiter-node-broken\n\n# Restore from backup\ncp -r /path/to/verdikta-arbiter-node_backup_TIMESTAMP /path/to/verdikta-arbiter-node\n\n# Restart the arbiter\ncd /path/to/verdikta-arbiter-node\n./start-arbiter.sh\n</code></pre>"},{"location":"upgrading/#the-script-doesnt-detect-my-installation","title":"The script doesn't detect my installation","text":"<p>Ensure your installation matches the expected structure: - It should have <code>ai-node</code>, <code>external-adapter</code>, and <code>chainlink-node</code> directories - It should have the management scripts: <code>start-arbiter.sh</code>, <code>stop-arbiter.sh</code>, and <code>arbiter-status.sh</code></p>"},{"location":"upgrading/#components-fail-to-restart-after-upgrade","title":"Components fail to restart after upgrade","text":"<p>If components don't restart properly:</p> <ol> <li>Check the logs:</li> <li>AI Node: <code>/path/to/verdikta-arbiter-node/ai-node/logs/</code></li> <li>External Adapter: <code>/path/to/verdikta-arbiter-node/external-adapter/logs/</code></li> <li> <p>Chainlink Node: <code>docker logs chainlink</code></p> </li> <li> <p>Try stopping and starting manually:    <pre><code>cd /path/to/verdikta-arbiter-node\n./stop-arbiter.sh\n# Wait a moment\n./start-arbiter.sh\n</code></pre></p> </li> </ol>"},{"location":"upgrading/#additional-notes","title":"Additional Notes","text":"<ul> <li>The upgrade process doesn't modify your database or blockchain state</li> <li>It's recommended to perform upgrades during maintenance windows</li> <li>Always ensure you have sufficient disk space for the backup</li> <li>If you've made custom modifications to the code, they may be overwritten during upgrade </li> </ul>"},{"location":"installation/","title":"Installation Guide","text":"<p>Welcome to the comprehensive installation guide for the Verdikta Arbiter Node. This section provides detailed instructions for setting up your oracle node, whether you prefer automated installation or want to understand each step in detail.</p>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":"<p>Choose the installation approach that best fits your needs and experience level:</p> <ul> <li> <p>:fontawesome-solid-magic:{ .lg .middle } Automated Installation</p> <p>Complete hands-off installation with guided setup prompts.</p> <p>Best for: Most users, production deployments, quick setup</p> <p> Automated Guide</p> </li> <li> <p> Manual Installation</p> <p>Step-by-step manual installation with full control over each component.</p> <p>Best for: Advanced users, custom configurations, learning</p> <p> Manual Guide</p> </li> <li> <p>:fontawesome-solid-cog:{ .lg .middle } Environment Setup</p> <p>Configure API keys, settings, and environment variables.</p> <p>Best for: Re-configuration, troubleshooting, updates</p> <p> Environment Setup</p> </li> </ul>"},{"location":"installation/#installation-overview","title":"Installation Overview","text":"<p>The Verdikta Arbiter Node installation process involves several key components working together:</p> <pre><code>graph TB\n    A[Prerequisites Check] --&gt; B[Environment Setup]\n    B --&gt; C[AI Node Installation]\n    B --&gt; D[External Adapter]\n    B --&gt; E[Docker &amp; PostgreSQL]\n    C --&gt; F[Chainlink Node Setup]\n    D --&gt; F\n    E --&gt; F\n    F --&gt; G[Smart Contract Deployment]\n    G --&gt; H[Job Configuration]\n    H --&gt; I[Oracle Registration]\n    I --&gt; J[Verification]\n\n    subgraph \"Core Components\"\n        C\n        D\n        E\n        F\n    end\n\n    subgraph \"Blockchain Setup\"\n        G\n        H\n        I\n    end</code></pre>"},{"location":"installation/#component-installation","title":"Component Installation","text":"<p>Each component can be installed individually for advanced setups or troubleshooting:</p>"},{"location":"installation/#core-services","title":"Core Services","text":"Component Purpose Installation Guide AI Node Core AI processing service AI Node Setup External Adapter Blockchain-AI bridge Adapter Setup Docker &amp; PostgreSQL Database infrastructure Docker Setup Chainlink Node Oracle infrastructure Chainlink Setup"},{"location":"installation/#blockchain-components","title":"Blockchain Components","text":"Component Purpose Installation Guide Smart Contracts On-chain oracle contracts Contract Deployment Job Configuration Oracle job and bridge setup Configuration"},{"location":"installation/#prerequisites-verification","title":"Prerequisites Verification","text":"<p>Before beginning installation, ensure your system meets all requirements:</p> <p>System Check</p> <p>Run the prerequisites checker to verify your system is ready:</p> <pre><code>cd verdikta-arbiter/installer\nbash util/check-prerequisites.sh\n</code></pre>"},{"location":"installation/#required-resources","title":"Required Resources","text":"<ul> <li>System: Ubuntu 20.04+, macOS 11+, or WSL2</li> <li>Hardware: 6GB+ RAM, 100GB+ storage, 2+ CPU cores</li> <li>Network: Stable internet connection</li> <li>API Keys: OpenAI, Anthropic, Web3 provider, IPFS service</li> <li>Testnet Funds: Base Sepolia ETH and LINK tokens</li> </ul> <p>\ud83d\udccb Complete checklist: Prerequisites Guide</p>"},{"location":"installation/#installation-paths","title":"Installation Paths","text":""},{"location":"installation/#path-1-quick-start-recommended","title":"Path 1: Quick Start (Recommended)","text":"<p>Perfect for most users who want to get running quickly:</p> <ol> <li> <p>Clone Repository <pre><code>git clone https://github.com/verdikta/verdikta-arbiter.git\ncd verdikta-arbiter/installer\n</code></pre></p> </li> <li> <p>Run Automated Installer <pre><code>bash bin/install.sh\n</code></pre></p> </li> <li> <p>Follow Interactive Prompts</p> </li> <li>Enter API keys and configuration</li> <li>Wait for automated installation</li> <li>Verify services are running</li> </ol> <p>\ud83d\ude80 Detailed walkthrough: Quick Start Guide</p>"},{"location":"installation/#path-2-manual-installation","title":"Path 2: Manual Installation","text":"<p>For users who need custom configurations or want to understand each step:</p> <ol> <li> <p>Check Prerequisites <pre><code>bash util/check-prerequisites.sh\n</code></pre></p> </li> <li> <p>Setup Environment <pre><code>bash bin/setup-environment.sh\n</code></pre></p> </li> <li> <p>Install Components Individually <pre><code>bash bin/install-ai-node.sh\nbash bin/install-adapter.sh\nbash bin/setup-docker.sh\nbash bin/setup-chainlink.sh\n</code></pre></p> </li> <li> <p>Deploy and Configure <pre><code>bash bin/deploy-contracts.sh\nbash bin/configure-node.sh\n</code></pre></p> </li> </ol> <p>\ud83d\udd27 Complete manual guide: Manual Installation</p>"},{"location":"installation/#post-installation","title":"Post-Installation","text":"<p>After successful installation, you'll have:</p>"},{"location":"installation/#running-services","title":"Running Services","text":"<ul> <li>AI Node: <code>http://localhost:3000</code></li> <li>External Adapter: <code>http://localhost:8080</code></li> <li>Chainlink Node: <code>http://localhost:6688</code></li> <li>PostgreSQL: <code>localhost:5432</code></li> </ul>"},{"location":"installation/#management-scripts","title":"Management Scripts","text":"<p>Located in your installation directory (default: <code>~/verdikta-arbiter-node/</code>):</p> <pre><code>./start-arbiter.sh    # Start all services\n./stop-arbiter.sh     # Stop all services\n./arbiter-status.sh   # Check service status\n</code></pre>"},{"location":"installation/#important-files","title":"Important Files","text":"<ul> <li>Contract Information: <code>~/verdikta-arbiter-node/installer/.contracts</code></li> <li>Chainlink Credentials: <code>~/verdikta-arbiter-node/chainlink-node/info.txt</code></li> <li>Environment Config: Various <code>.env</code> files in component directories</li> </ul>"},{"location":"installation/#verification-steps","title":"Verification Steps","text":"<p>After installation, verify everything is working:</p>"},{"location":"installation/#1-service-status-check","title":"1. Service Status Check","text":"<pre><code>cd ~/verdikta-arbiter-node\n./arbiter-status.sh\n</code></pre>"},{"location":"installation/#2-chainlink-ui-access","title":"2. Chainlink UI Access","text":"<ol> <li>Open http://localhost:6688</li> <li>Login with credentials from <code>chainlink-node/info.txt</code></li> <li>Verify job is active in Jobs section</li> </ol>"},{"location":"installation/#3-ai-node-health-check","title":"3. AI Node Health Check","text":"<pre><code>curl http://localhost:3000/health\n</code></pre>"},{"location":"installation/#4-end-to-end-test","title":"4. End-to-End Test","text":"<p>The installer includes verification scripts:</p> <pre><code>cd verdikta-arbiter/installer\nbash util/verify-installation.sh\n</code></pre>"},{"location":"installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":"Issue Solution Port conflicts Check running services with <code>lsof -i :PORT</code> Docker not running Start Docker: <code>sudo systemctl start docker</code> API key errors Re-run: <code>bash bin/setup-environment.sh</code> Contract deployment fails Check testnet funds and network connectivity Services won't start Check logs and restart Docker <p>\ud83d\udd0d Detailed troubleshooting: Troubleshooting Guide</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Once installation is complete:</p> <ol> <li>Oracle Registration: Register with dispatcher</li> <li>Service Management: Learn management commands</li> <li>Monitoring Setup: Configure status monitoring</li> <li>Backup Creation: Setup backup procedures</li> </ol>"},{"location":"installation/#support","title":"Support","text":"<p>Need help with installation?</p> <ul> <li>Documentation: Browse component-specific guides</li> <li>GitHub Issues: Report installation problems</li> <li>Discord: Get community help in real-time</li> <li>Email: Contact support for urgent issues</li> </ul> <p>Installation Success</p> <p>A successful installation should have all services running and accessible. The Chainlink UI should show an active job, and the AI Node should respond to health checks.</p> <p>Ready to begin? Choose your installation method:</p> <ul> <li>\ud83d\ude80 Quick Start: Automated Installation</li> <li>\ud83d\udd27 Advanced Setup: Manual Installation</li> <li>\u2699\ufe0f Configuration Only: Environment Setup </li> </ul>"},{"location":"installation/automated/","title":"Automated Installation","text":"<p>The automated installation is the recommended method for most users. It provides a guided, interactive setup process that handles all components and configuration automatically.</p> <p>Recommended Installation Method</p> <p>The automated installer is thoroughly tested and provides the most reliable setup experience. It's suitable for both beginners and experienced users.</p>"},{"location":"installation/automated/#before-you-begin","title":"Before You Begin","text":"<p>Ensure you have completed the Prerequisites checklist:</p> <ul> <li> System meets minimum requirements (Ubuntu 20.04+, macOS 11+, or WSL2)</li> <li> API keys for OpenAI, Anthropic, Web3 provider, and IPFS service</li> <li> Testnet funds (Base Sepolia ETH and LINK)</li> <li> Stable internet connection</li> </ul>"},{"location":"installation/automated/#installation-process","title":"Installation Process","text":""},{"location":"installation/automated/#step-1-repository-setup","title":"Step 1: Repository Setup","text":"<p>Clone the Verdikta Arbiter repository:</p> <pre><code>git clone https://github.com/verdikta/verdikta-arbiter.git\ncd verdikta-arbiter/installer\n</code></pre>"},{"location":"installation/automated/#step-2-launch-installer","title":"Step 2: Launch Installer","text":"<p>Start the automated installation:</p> <pre><code>bash bin/install.sh\n</code></pre> <p>The installer will display a welcome banner:</p> <pre><code>====================================================\n  Verdikta Arbiter Node Installation\n====================================================\n\n[1/9] Checking prerequisites...\n</code></pre>"},{"location":"installation/automated/#step-3-prerequisites-check","title":"Step 3: Prerequisites Check","text":"<p>The installer automatically verifies system requirements:</p> <pre><code>Checking system prerequisites for Verdikta Arbiter Node...\n\u2713 Ubuntu 22.04 detected.\n\u2713 8 CPU cores detected.\n\u2713 16 GB RAM detected.\n\u2713 250 GB available disk space detected.\n\u2713 Git version 2.34.1 detected.\n\u2713 Node.js version 18.19.0 detected.\n\u2713 Docker version 24.0.7 detected.\n\u2713 Docker daemon is running.\n\u2713 Docker Compose plugin version 2.21.0 detected.\n\u2713 Internet connectivity detected.\n\u2713 jq version 1.6 detected.\n\n=== Prerequisite Check Summary ===\nAll prerequisites met! Your system is ready for Verdikta Arbiter Node installation.\n</code></pre> <p>If any prerequisites fail, address them before continuing.</p>"},{"location":"installation/automated/#step-4-environment-configuration","title":"Step 4: Environment Configuration","text":"<p>The installer will prompt for configuration details. Have your API keys ready:</p>"},{"location":"installation/automated/#installation-directory","title":"Installation Directory","text":"<pre><code>Enter installation directory [~/verdikta-arbiter-node]: \n</code></pre> <ul> <li>Default: <code>~/verdikta-arbiter-node</code></li> <li>Custom: Enter your preferred path</li> <li>Note: Ensure the user has write permissions</li> </ul>"},{"location":"installation/automated/#openai-configuration","title":"OpenAI Configuration","text":"<pre><code>Enter your OpenAI API key: sk-...\nSelect OpenAI model:\n1) gpt-4-turbo-preview (Recommended)\n2) gpt-4\n3) gpt-3.5-turbo\nChoose [1-3]: 1\n</code></pre> <p>Model Selection</p> <ul> <li>gpt-4-turbo-preview: Latest and most capable model</li> <li>gpt-4: Stable version with proven performance  </li> <li>gpt-3.5-turbo: Cost-effective but less capable</li> </ul>"},{"location":"installation/automated/#anthropic-configuration","title":"Anthropic Configuration","text":"<pre><code>Enter your Anthropic API key: sk-ant-...\nSelect Claude model:\n1) claude-3-opus-20240229 (Most capable)\n2) claude-3-sonnet-20240229 (Recommended)\n3) claude-3-haiku-20240307 (Fastest)\nChoose [1-3]: 2\n</code></pre>"},{"location":"installation/automated/#web3-provider-setup","title":"Web3 Provider Setup","text":"<pre><code>Select Web3 provider:\n1) Infura\n2) Alchemy\n3) QuickNode\n4) Custom RPC\nChoose [1-4]: 1\n\nEnter your Infura API key: ...\nEnter Base Sepolia RPC URL [https://base-sepolia.infura.io/v3/YOUR_KEY]: \n</code></pre>"},{"location":"installation/automated/#ipfs-service-configuration","title":"IPFS Service Configuration","text":"<pre><code>Select IPFS provider:\n1) Pinata (Recommended)\n2) Infura IPFS\nChoose [1-2]: 1\n\nEnter Pinata API Key: ...\nEnter Pinata Secret Key: ...\n</code></pre>"},{"location":"installation/automated/#wallet-configuration","title":"Wallet Configuration","text":"<pre><code>Enter your wallet private key (for testnet only): 0x...\n</code></pre> <p>Security Warning</p> <ul> <li>TESTNET ONLY: Never use mainnet private keys</li> <li>Secure Storage: Store private keys separately from code</li> <li>No Sharing: Never commit private keys to version control</li> </ul>"},{"location":"installation/automated/#step-5-installation-progress","title":"Step 5: Installation Progress","text":"<p>Monitor the automated installation through 9 steps:</p>"},{"location":"installation/automated/#step-1-prerequisites-check","title":"Step 1: Prerequisites Check \u2713","text":"<pre><code>[1/9] Checking prerequisites...\n\u2713 Prerequisites check passed.\n</code></pre>"},{"location":"installation/automated/#step-2-environment-setup","title":"Step 2: Environment Setup \u2713","text":"<pre><code>[2/9] Setting up environment...\nCreating environment files...\nConfiguring API keys...\nSetting up directory structure...\n\u2713 Environment setup completed.\n</code></pre>"},{"location":"installation/automated/#step-3-ai-node-installation","title":"Step 3: AI Node Installation \u2713","text":"<pre><code>[3/9] Installing AI Node...\nCopying AI Node files...\nInstalling Node.js dependencies...\nConfiguring environment variables...\nSetting up AI model configurations...\n\u2713 AI Node installation completed.\n</code></pre>"},{"location":"installation/automated/#step-4-external-adapter-installation","title":"Step 4: External Adapter Installation \u2713","text":"<pre><code>[4/9] Installing External Adapter...\nCopying External Adapter files...\nInstalling dependencies...\nConfiguring bridge settings...\n\u2713 External Adapter installation completed.\n</code></pre>"},{"location":"installation/automated/#step-5-docker-postgresql-setup","title":"Step 5: Docker &amp; PostgreSQL Setup \u2713","text":"<pre><code>[5/9] Setting up Docker and PostgreSQL...\nPulling PostgreSQL Docker image...\nCreating database container...\nConfiguring database settings...\n\u2713 Docker and PostgreSQL setup completed.\n</code></pre>"},{"location":"installation/automated/#step-6-chainlink-node-setup","title":"Step 6: Chainlink Node Setup \u2713","text":"<pre><code>[6/9] Setting up Chainlink Node...\nPulling Chainlink Docker image...\nCreating Chainlink configuration...\nGenerating node credentials...\nStarting Chainlink node...\n\u2713 Chainlink Node setup completed.\n</code></pre>"},{"location":"installation/automated/#step-7-smart-contract-deployment","title":"Step 7: Smart Contract Deployment \u2713","text":"<pre><code>[7/9] Deploying Smart Contracts...\nCompiling contracts...\nDeploying Operator contract...\nContract deployed at: 0x1234567890abcdef...\nAuthorizing Chainlink node...\n\u2713 Smart Contract deployment completed.\n</code></pre>"},{"location":"installation/automated/#step-8-job-configuration","title":"Step 8: Job Configuration \u2713","text":"<pre><code>[8/9] Configuring Node Jobs and Bridges...\nCreating External Adapter bridge...\nDeploying job specification...\nJob ID: abcd1234-5678-90ef-ghij-klmnopqrstuv\n\u2713 Node Jobs and Bridges configuration completed.\n</code></pre>"},{"location":"installation/automated/#step-9-oracle-registration","title":"Step 9: Oracle Registration \u2713","text":"<pre><code>[9/9] Registering Oracle with Dispatcher (Optional)...\nCreating oracle registration...\nSubmitting to aggregator contract...\nOracle registered with class ID: 128\n\u2713 Oracle registration step completed.\n</code></pre>"},{"location":"installation/automated/#step-6-installation-completion","title":"Step 6: Installation Completion","text":"<p>Upon successful completion:</p> <pre><code>====================================================\n  Verdikta Arbiter Node Installation Complete!\n====================================================\n\nCongratulations! Your Verdikta Arbiter Node has been successfully installed.\n\nAccess your services at:\n  - AI Node:         http://localhost:3000\n  - External Adapter: http://localhost:8080\n  - Chainlink Node:   http://localhost:6688\n\nManagement scripts created:\n  - To start all services: ~/verdikta-arbiter-node/start-arbiter.sh\n  - To stop all services:  ~/verdikta-arbiter-node/stop-arbiter.sh\n  - To check status:       ~/verdikta-arbiter-node/arbiter-status.sh\n\nContract information saved to: ~/verdikta-arbiter-node/installer/.contracts\n</code></pre>"},{"location":"installation/automated/#post-installation-verification","title":"Post-Installation Verification","text":""},{"location":"installation/automated/#service-status-check","title":"Service Status Check","text":"<p>Verify all services are running:</p> <pre><code>cd ~/verdikta-arbiter-node\n./arbiter-status.sh\n</code></pre> <p>Expected output: <pre><code>=== Verdikta Arbiter Node Status ===\n\n[AI Node] Running on port 3000 \u2713\n[External Adapter] Running on port 8080 \u2713\n[Chainlink Node] Running on port 6688 \u2713\n[PostgreSQL] Running on port 5432 \u2713\n\nAll services are running correctly!\n</code></pre></p>"},{"location":"installation/automated/#web-interface-access","title":"Web Interface Access","text":""},{"location":"installation/automated/#chainlink-node-ui","title":"Chainlink Node UI","text":"<ol> <li>Open http://localhost:6688</li> <li>Get credentials from <code>~/verdikta-arbiter-node/chainlink-node/info.txt</code>:    <pre><code>Chainlink Node UI: http://localhost:6688\nEmail: admin@verdikta.local\nPassword: [generated-password]\n</code></pre></li> <li>Login and verify the job is active in the Jobs section</li> </ol>"},{"location":"installation/automated/#ai-node-health-check","title":"AI Node Health Check","text":"<pre><code>curl http://localhost:3000/health\n</code></pre> <p>Expected response: <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"version\": \"1.0.0\",\n  \"components\": {\n    \"openai\": \"connected\",\n    \"anthropic\": \"connected\",\n    \"ipfs\": \"connected\"\n  }\n}\n</code></pre></p>"},{"location":"installation/automated/#configuration-files-review","title":"Configuration Files Review","text":"<p>Important files created during installation:</p>"},{"location":"installation/automated/#contract-information","title":"Contract Information","text":"<p>File: <code>~/verdikta-arbiter-node/installer/.contracts</code></p> <pre><code>OPERATOR_ADDRESS=0x1234567890abcdef...\nNODE_ADDRESS=0x9876543210fedcba...\nLINK_TOKEN_ADDRESS=0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06\nJOB_ID=abcd1234-5678-90ef-ghij-klmnopqrstuv\nAGGREGATOR_ADDRESS=0xE75426Ed0491a8290fC55CAA71ab5e1d95F4BaF6\nCLASSES_ID=128\n</code></pre>"},{"location":"installation/automated/#environment-variables","title":"Environment Variables","text":"<ul> <li>AI Node: <code>~/verdikta-arbiter-node/ai-node/.env.local</code></li> <li>External Adapter: <code>~/verdikta-arbiter-node/external-adapter/.env</code></li> <li>Chainlink Config: <code>~/.chainlink-sepolia/config.toml</code></li> </ul>"},{"location":"installation/automated/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"installation/automated/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"installation/automated/#port-already-in-use","title":"Port Already in Use","text":"<p>Error: <code>Port 6688 is already in use</code></p> <p>Solution: <pre><code># Check what's using the port\nsudo lsof -i :6688\n\n# Stop the conflicting service or change port\nsudo kill -9 &lt;PID&gt;\n\n# Restart installation\nbash bin/install.sh\n</code></pre></p>"},{"location":"installation/automated/#docker-service-not-running","title":"Docker Service Not Running","text":"<p>Error: <code>Cannot connect to the Docker daemon</code></p> <p>Solution: <pre><code># Start Docker service\nsudo systemctl start docker\nsudo systemctl enable docker\n\n# Verify Docker is running\ndocker info\n\n# Restart installation\nbash bin/install.sh\n</code></pre></p>"},{"location":"installation/automated/#api-key-authentication-failed","title":"API Key Authentication Failed","text":"<p>Error: <code>OpenAI API authentication failed</code></p> <p>Solution: <pre><code># Re-run environment setup with correct keys\nbash bin/setup-environment.sh\n\n# Verify API key format and permissions\ncurl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  https://api.openai.com/v1/models\n</code></pre></p>"},{"location":"installation/automated/#contract-deployment-failed","title":"Contract Deployment Failed","text":"<p>Error: <code>Insufficient funds for intrinsic transaction cost</code></p> <p>Solution: <pre><code># Check wallet balance\n# Get more testnet funds from faucets\n# Verify RPC endpoint is working\n\n# Re-run contract deployment\nbash bin/deploy-contracts.sh\n</code></pre></p>"},{"location":"installation/automated/#services-wont-start","title":"Services Won't Start","text":"<p>Error: Various service startup failures</p> <p>Solution: <pre><code># Check Docker container status\ndocker ps -a\n\n# Review logs for specific errors\ndocker logs chainlink-node\ndocker logs postgres-db\n\n# Restart services\ncd ~/verdikta-arbiter-node\n./stop-arbiter.sh\n./start-arbiter.sh\n</code></pre></p>"},{"location":"installation/automated/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check Logs: Review service logs for specific error messages</li> <li>Verify Prerequisites: Re-run <code>bash util/check-prerequisites.sh</code></li> <li>Documentation: Consult the Troubleshooting Guide</li> <li>Community Support: Ask for help in Discord or GitHub Issues</li> </ol>"},{"location":"installation/automated/#next-steps","title":"Next Steps","text":"<p>After successful automated installation:</p> <ol> <li>Service Management: Learn to start, stop, and monitor your services</li> <li>Oracle Registration: Complete dispatcher registration for production use</li> <li>Monitoring Setup: Configure status monitoring and alerts</li> <li>Backup Creation: Set up backup procedures for your configuration</li> </ol>"},{"location":"installation/automated/#manual-override","title":"Manual Override","text":"<p>If you need to customize specific components after automated installation:</p> <ul> <li>Environment Changes: Re-run <code>bash bin/setup-environment.sh</code></li> <li>Contract Redeployment: Run <code>bash bin/deploy-contracts.sh</code></li> <li>Job Reconfiguration: Execute <code>bash bin/configure-node.sh</code></li> <li>Component Updates: Use individual component installation scripts</li> </ul> <p>Installation Complete</p> <p>Your Verdikta Arbiter Node is now operational and ready to process arbitration requests. The automated installation ensures all components are properly configured and integrated. </p>"},{"location":"management/","title":"Service Management","text":"<p>Once your Verdikta Arbiter Node is installed, you'll need to know how to manage and monitor your services effectively. This section covers all aspects of day-to-day node operation.</p>"},{"location":"management/#management-overview","title":"Management Overview","text":"<p>Your Verdikta Arbiter Node consists of multiple services that work together:</p> <pre><code>graph TB\n    A[Management Scripts] --&gt; B[AI Node]\n    A --&gt; C[External Adapter]\n    A --&gt; D[Chainlink Node]\n    A --&gt; E[PostgreSQL Database]\n\n    F[Status Monitoring] --&gt; B\n    F --&gt; C\n    F --&gt; D\n    F --&gt; E\n\n    G[Log Analysis] --&gt; B\n    G --&gt; C\n    G --&gt; D\n    G --&gt; E\n\n    subgraph \"Core Services\"\n        B\n        C\n        D\n        E\n    end</code></pre>"},{"location":"management/#quick-management-commands","title":"Quick Management Commands","text":"<p>Located in your installation directory (default: <code>~/verdikta-arbiter-node/</code>):</p>"},{"location":"management/#start-all-services","title":"Start All Services","text":"<pre><code>cd ~/verdikta-arbiter-node\n./start-arbiter.sh\n</code></pre>"},{"location":"management/#stop-all-services","title":"Stop All Services","text":"<pre><code>cd ~/verdikta-arbiter-node\n./stop-arbiter.sh\n</code></pre>"},{"location":"management/#check-service-status","title":"Check Service Status","text":"<pre><code>cd ~/verdikta-arbiter-node\n./arbiter-status.sh\n</code></pre>"},{"location":"management/#management-topics","title":"Management Topics","text":"<ul> <li> <p> Starting Services</p> <p>Learn how to start your arbiter node services properly</p> <p> Starting Guide</p> </li> <li> <p> Stopping Services</p> <p>Safely stop services and handle shutdown procedures</p> <p> Stopping Guide</p> </li> <li> <p> Status Monitoring</p> <p>Monitor service health and performance metrics</p> <p> Monitoring Guide</p> </li> <li> <p>:fontawesome-solid-file-text:{ .lg .middle } Logs &amp; Debugging</p> <p>Access and analyze service logs for troubleshooting</p> <p> Logging Guide</p> </li> </ul>"},{"location":"management/#service-architecture","title":"Service Architecture","text":""},{"location":"management/#service-dependencies","title":"Service Dependencies","text":"<p>Understanding service dependencies helps with troubleshooting:</p> <pre><code>graph TD\n    A[PostgreSQL] --&gt; B[Chainlink Node]\n    B --&gt; C[External Adapter]\n    C --&gt; D[AI Node]\n\n    E[Docker] --&gt; A\n    F[Node.js] --&gt; C\n    F --&gt; D\n\n    subgraph \"External Dependencies\"\n        G[OpenAI API]\n        H[Anthropic API]\n        I[IPFS Service]\n        J[Base Sepolia RPC]\n    end\n\n    D --&gt; G\n    D --&gt; H\n    D --&gt; I\n    B --&gt; J</code></pre>"},{"location":"management/#service-ports","title":"Service Ports","text":"<p>Default port assignments:</p> Service Port Protocol Access AI Node 3000 HTTP Local/External External Adapter 8080 HTTP Local only Chainlink Node 6688 HTTP Local/External PostgreSQL 5432 TCP Local only"},{"location":"management/#common-management-tasks","title":"Common Management Tasks","text":""},{"location":"management/#daily-operations","title":"Daily Operations","text":"<ul> <li>Health Checks: Verify all services are running</li> <li>Log Review: Check for errors or warnings</li> <li>Performance Monitoring: Track response times and resource usage</li> </ul>"},{"location":"management/#weekly-maintenance","title":"Weekly Maintenance","text":"<ul> <li>Backup Creation: Backup configuration and database</li> <li>Log Rotation: Archive old logs to save space</li> <li>Update Checks: Review for available updates</li> </ul>"},{"location":"management/#monthly-tasks","title":"Monthly Tasks","text":"<ul> <li>Performance Analysis: Review monthly performance metrics</li> <li>Security Updates: Apply security patches</li> <li>Configuration Review: Verify settings are optimal</li> </ul>"},{"location":"management/#service-health-indicators","title":"Service Health Indicators","text":""},{"location":"management/#healthy-status","title":"Healthy Status","text":"<pre><code>=== Verdikta Arbiter Node Status ===\n\n[AI Node] Running on port 3000 \u2713\n[External Adapter] Running on port 8080 \u2713  \n[Chainlink Node] Running on port 6688 \u2713\n[PostgreSQL] Running on port 5432 \u2713\n\nAll services are running correctly!\n</code></pre>"},{"location":"management/#warning-signs","title":"Warning Signs","text":"<ul> <li>Services showing as \"Stopped\" or \"Error\"</li> <li>High memory or CPU usage</li> <li>Frequent restart cycles</li> <li>Network connectivity issues</li> <li>API authentication failures</li> </ul>"},{"location":"management/#critical-issues","title":"Critical Issues","text":"<ul> <li>Multiple services down</li> <li>Database corruption</li> <li>Out of disk space</li> <li>Network isolation</li> <li>Contract deployment failures</li> </ul>"},{"location":"management/#resource-monitoring","title":"Resource Monitoring","text":""},{"location":"management/#system-resources","title":"System Resources","text":"<p>Monitor these key metrics:</p> <ul> <li>CPU Usage: Should stay below 80% under normal load</li> <li>Memory Usage: Watch for memory leaks in Node.js services</li> <li>Disk Space: Ensure sufficient space for logs and database</li> <li>Network: Monitor bandwidth for IPFS and API calls</li> </ul>"},{"location":"management/#service-specific-metrics","title":"Service-Specific Metrics","text":""},{"location":"management/#ai-node","title":"AI Node","text":"<ul> <li>Request processing time</li> <li>AI model response rates</li> <li>IPFS retrieval performance</li> <li>Error rates by request type</li> </ul>"},{"location":"management/#chainlink-node","title":"Chainlink Node","text":"<ul> <li>Job execution success rate</li> <li>Oracle response times</li> <li>Gas usage patterns</li> <li>LINK token balance</li> </ul>"},{"location":"management/#external-adapter","title":"External Adapter","text":"<ul> <li>Bridge request/response volume</li> <li>Data validation errors</li> <li>Timeout incidents</li> <li>Connection pool status</li> </ul>"},{"location":"management/#automated-monitoring","title":"Automated Monitoring","text":""},{"location":"management/#service-health-checks","title":"Service Health Checks","text":"<p>You can automate status monitoring with cron jobs:</p> <pre><code># Add to crontab (crontab -e)\n# Check status every 5 minutes\n*/5 * * * * cd ~/verdikta-arbiter-node &amp;&amp; ./arbiter-status.sh &gt;&gt; ~/arbiter-health.log\n</code></pre>"},{"location":"management/#log-rotation","title":"Log Rotation","text":"<p>Set up automatic log rotation:</p> <pre><code># Add to /etc/logrotate.d/verdikta-arbiter\n~/verdikta-arbiter-node/*/logs/*.log {\n    daily\n    missingok\n    rotate 7\n    compress\n    notifempty\n    create 644 root root\n}\n</code></pre>"},{"location":"management/#restart-on-failure","title":"Restart on Failure","text":"<p>Implement automatic restart for critical services:</p> <pre><code># systemd service file example\n[Unit]\nDescription=Verdikta Arbiter Node\nAfter=docker.service\n\n[Service]\nType=oneshot\nExecStart=/home/user/verdikta-arbiter-node/start-arbiter.sh\nExecStop=/home/user/verdikta-arbiter-node/stop-arbiter.sh\nRemainAfterExit=yes\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"management/#emergency-procedures","title":"Emergency Procedures","text":""},{"location":"management/#service-recovery","title":"Service Recovery","text":"<p>If services become unresponsive:</p> <ol> <li> <p>Stop All Services <pre><code>./stop-arbiter.sh\n</code></pre></p> </li> <li> <p>Check System Resources <pre><code>df -h  # Disk space\nfree -m  # Memory usage\ntop     # CPU usage\n</code></pre></p> </li> <li> <p>Review Logs <pre><code># Check for recent errors\ntail -n 100 ~/verdikta-arbiter-node/*/logs/*.log\n</code></pre></p> </li> <li> <p>Restart Services <pre><code>./start-arbiter.sh\n</code></pre></p> </li> </ol>"},{"location":"management/#database-recovery","title":"Database Recovery","text":"<p>If PostgreSQL issues occur:</p> <pre><code># Check database status\ndocker ps | grep postgres\n\n# View database logs\ndocker logs postgres-db\n\n# Restart database only\ndocker restart postgres-db\n</code></pre>"},{"location":"management/#network-issues","title":"Network Issues","text":"<p>For connectivity problems:</p> <pre><code># Test external API connectivity\ncurl -s https://api.openai.com/v1/models\ncurl -s https://api.anthropic.com/\n\n# Test blockchain connectivity\ncurl -s -X POST -H \"Content-Type: application/json\" \\\n  --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}' \\\n  YOUR_RPC_ENDPOINT\n</code></pre>"},{"location":"management/#performance-optimization","title":"Performance Optimization","text":""},{"location":"management/#resource-tuning","title":"Resource Tuning","text":"<ul> <li>AI Node: Adjust worker processes based on CPU cores</li> <li>Chainlink Node: Optimize database connection pools</li> <li>PostgreSQL: Tune memory settings for workload</li> <li>Docker: Set appropriate resource limits</li> </ul>"},{"location":"management/#scaling-considerations","title":"Scaling Considerations","text":"<ul> <li>Horizontal Scaling: Multiple arbiter nodes for load distribution</li> <li>Vertical Scaling: Increase resources for single node performance</li> <li>Load Balancing: Distribute requests across multiple nodes</li> </ul>"},{"location":"management/#best-practices","title":"Best Practices","text":""},{"location":"management/#security","title":"Security","text":"<ul> <li>Regular Updates: Keep all components updated</li> <li>Access Control: Limit network access to necessary ports</li> <li>Key Management: Rotate API keys and credentials regularly</li> <li>Monitoring: Set up alerts for security events</li> </ul>"},{"location":"management/#reliability","title":"Reliability","text":"<ul> <li>Backup Strategy: Regular backups of configuration and data</li> <li>Redundancy: Consider multiple nodes for critical deployments</li> <li>Monitoring: Comprehensive health and performance monitoring</li> <li>Documentation: Keep operational procedures documented</li> </ul>"},{"location":"management/#performance","title":"Performance","text":"<ul> <li>Resource Monitoring: Track usage patterns and optimize</li> <li>Log Management: Implement proper log rotation and archival</li> <li>Network Optimization: Use efficient API calls and caching</li> <li>Database Maintenance: Regular PostgreSQL maintenance</li> </ul>"},{"location":"management/#getting-started","title":"Getting Started","text":"<p>Ready to learn service management? Start with:</p> <ol> <li>Starting Services - How to properly start your node</li> <li>Status Monitoring - Monitor your node's health</li> <li>Log Analysis - Understanding and analyzing logs</li> </ol> <p>Management Best Practices</p> <p>Effective service management is key to running a reliable arbiter node. Regular monitoring and maintenance will help ensure optimal performance and minimize downtime. </p>"}]}